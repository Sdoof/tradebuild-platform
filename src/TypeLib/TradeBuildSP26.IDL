// typelib filename: TradeBuildSP26.tlb

[
  uuid(872e3a7f-9b81-4863-8699-ee01860c59ed),
  version(3.0),
  helpstring("TradeBuild 2.6 Service Provider Interface Type Library")
]
library TradeBuildSP
{
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

	// TradeWright Utilities
	importlib("E:\Projects\TradeWright Common\TWUtilities\TWUtilities30.dll");
	
	// TradeWright Contract Utilities
	importlib("E:\Projects\TradeBuild Platform\ContractUtils\ContractUtils26.dll");
	
	// TradeWright Timeframe Utilities
	importlib("E:\Projects\TradeBuild Platform\TimeframeUtils\TimeframeUtils2-6.dll");
	
	// TradeWright Tick Utilities
	importlib("E:\Projects\TradeBuild Platform\TickUtils\TickUtils26.dll");
	
    // Forward declare all types defined in this typelib
    interface IBarDataConsumer;
    interface IBarDataInputServiceConsumer;
    interface IBarDataOutputServiceConsumer;
    interface IBarDataReader;
    interface IBarDataServiceProvider;
    interface IBarDataWriter;
    interface ICommonServiceConsumer;
    interface ICommonServiceProvider;
    interface IContractInfoServiceConsumer;
    interface IContractInfoServiceProvider;
	interface IExecutionReport;
    interface IOrder;
	interface IOrderPersistenceServiceProvider;
    interface IOrderPlex;
	interface IOrderRecoveryServiceConsumer;
    interface IOrderReport;
	interface IOrderStatusReport;
	interface IOrderSubmissionSrvcConsumer;
    interface IOrderSubmissionSrvcProvider;
    interface IOrderSubmitter;
    interface IRealtimeDataInputServiceConsumer;
    interface IRealtimeDataReader;
    interface IRealtimeDataServiceProvider;
    interface IStreamingDataConsumer;
    interface ITickfileInputServiceConsumer;
    interface ITickfileOutputServiceConsumer;
    interface ITickfileReader;
    interface ITickfileServiceProvider;
    interface ITickfileSpecifier;
    interface ITickfileWriter;

// Enums *************************************************************************

    typedef [uuid(85d2b0ef-7649-40bb-abb6-a0813d43597f), version(1.0)]
    enum {
		BulletinNews = 1,
		BulletinExchangeUnavailable = 2,
		BulletinExchangeAvailable = 3
    } BulletinTypes;

    typedef [uuid(892d802e-490e-401c-b12c-8a313e004ce8), version(1.0)]
    enum {
        Store = 1
    } ContractInfoServiceProviderCapabilities;

    typedef [uuid(170DD609-38C8-49DA-9096-33BA70A4ECDB), version(1.0)]
    enum {
        DOMNone = 0,
        DOMByPosition = 1,
        DOMByPrice = 2
    } DOMEventTypes;

    typedef [uuid(e0132d3f-a956-484d-a703-062027df9f8d), version(1.0)]
    enum {
        HistDataStore = 1
    } HistoricDataServiceProviderCapabilities;

    typedef [uuid(CA5FFDA3-757C-4CB6-B86E-AD4C524E49D2), version(1.0)]
    enum {
        LegSamePos = 0,
        LegOpenPos = 1,
        LegClosePos = 2,
        LegUnknownPos = 3
    } LegOpenClose;

    typedef [uuid(9f77deb1-43ef-484a-8138-f029377382bf), version(1.0)]
    enum {
		ActionNone = 0,
		ActionBuy = 1,
		ActionSell = 2
    } OrderActions;

    typedef [uuid(ab15202e-686b-49ea-8ff9-7408a8ccfe77), version(1.0)]
    enum {
		OrderAttOpenClose		= 1,
		OrderAttOrigin			= 2,
		OrderAttOriginatorRef		= 4, 
		OrderAttBlockOrder		= 8,
		OrderAttSweepToFill		= 0x10,
		OrderAttDisplaySize		= 0x20,
		OrderAttIgnoreRTH		= 0x40,
		OrderAttHidden			= 0x80,
		OrderAttDiscretionaryAmount	= 0x100,
		OrderAttGoodAfterTime		= 0x200,
		OrderAttGoodTillDate		= 0x400,
		OrderAttRTHOnly			= 0x800,
		OrderAttRule80A			= 0x1000,
		OrderAttSettlingFirm		= 0x2000,
		OrderAttAllOrNone		= 0x4000,
		OrderAttMinimumQuantity		= 0x8000,
		OrderAttPercentOffset		= 0x10000,
		OrderAttETradeOnly		= 0x20000,
		OrderAttFirmQuoteOnly		= 0x40000,
		OrderAttNBBOPriceCap		= 0x80000,
		OrderAttOverrideConstraints 	= 0x100000,
		OrderAttAction 			= 0x200000,
		OrderAttLimitPrice 		= 0x400000,
		OrderAttOrderType 		= 0x800000,
		OrderAttQuantity 		= 0x1000000,
		OrderAttTimeInForce 		= 0x2000000,
		OrderAttTriggerPrice 		= 0x4000000,
		OrderAttGoodAfterTimeTZ		= 0x8000000,
		OrderAttGoodTillDateTZ		= 0x10000000,
		OrderAttStopTriggerMethod	= 0x20000000
    } OrderAttributes;

    typedef [uuid(ada7a6cd-f9ed-44ff-a29f-0f34dd6413d4), version(1.0)]
    enum {
		OriginCustomer = 0,
		OriginFirm = 1,
		OriginUnknown = 2
    } OrderOrigins;

    typedef [uuid(376DC92E-BB75-43D4-82E0-B20D1CE35011), version(1.0)]
    enum {
		[helpstring("This state indicates that the order plex has been created but none of the orders have yet been placed.")]
		OrderPlexStateCreated = 1,
	    
		[helpstring("This state indicates that all the orders in the order plex have been placed.")]
		OrderPlexStateSubmitted,
	    
		[helpstring("This state indicates that the order plex is in the process of being cancelled.")]
		OrderPlexStateCancelling,
	    
		[helpstring("This state indicates that the order plex is being closed out. (When an order plex has been closed out, there are no outstanding orders and no net size - note that this may require a closeout order to be placed to negate any existing size.)")]
		OrderPlexStateClosingOut,
	        
		[helpstring("This state indicates that all orders have been completed.")]
		OrderPlexStateClosed,

		[helpstring("This state indicates that a cancellation notification for either the stop order or the target order, when both exist, has been received.")]
		OrderPlexStateAwaitingOtherOrderCancel
	} OrderPlexStateCodes;

    typedef [uuid(da605462-9db7-48cd-a876-777c58e18ac6), version(1.0)]
    enum {
		OrderStatusCreated = 0,
		OrderStatusRejected = 1,
		OrderStatusPendingSubmit = 2,
		OrderStatusPreSubmitted = 3,
		OrderStatusSubmitted = 4,
		OrderStatusFilled = 5,
		OrderStatusCancelling = 6,
		OrderStatusCancelled = 7
    } OrderStatuses;

    typedef [uuid(4eb50cca-7eb2-491e-8b73-22c1dba731d6), version(1.0)]
    enum {
		TIFDay 				= 1,
		TIFGoodTillCancelled 		= 2,
		TIFImmediateOrCancel 		= 4
    } OrderTifs;

    typedef [uuid(0B9D5098-388C-42B8-839D-C268A42457E9), version(1.0)]
    enum {
        OrderTypeNone 			= 0,
        OrderTypeMarket 		= 1,
        OrderTypeMarketOnClose 		= 2,
        OrderTypeLimit 			= 4,
        OrderTypeLimitOnClose 		= 8,
        OrderTypePeggedToMarket 	= 0x10,
        OrderTypeStop 			= 0x20,
        OrderTypeStopLimit 		= 0x40,
        OrderTypeTrail 			= 0x80,
        OrderTypeRelative 		= 0x100,
        OrderTypeVWAP 			= 0x200,
        OrderTypeMarketToLimit 		= 0x400,
        OrderTypeQuote 			= 0x800,
		OrderTypeAutoStop 		= 0x1000,
		OrderTypeAutoLimit 		= 0x2000,
		OrderTypeAdjust 		= 0x4000,
		OrderTypeAlert 			= 0x8000,
		OrderTypeLimitIfTouched 	= 0x10000,
		OrderTypeMarketIfTouched 	= 0x20000,
		OrderTypeTrailLimit 		= 0x40000,
		OrderTypeMarketWithProtection 	= 0x80000,
		OrderTypeMarketOnOpen 		= 0x100000,
        OrderTypeLimitOnOpen 		= 0x200000,
        OrderTypePeggedToPrimary 	= 0x400000
    } OrderTypes;

    typedef [uuid(b89b351b-596e-42db-b3aa-9c244b5df140), version(1.0)]
    enum {
        RtCapMarketDepthByPrice = 1,
        RtCapMarketDepthByPosition = 2
    } RealtimeDataServiceProviderCapabilities;

    typedef [uuid(6fa60c65-34bb-4602-863f-210003444d85), 
	version(1.0)]
    enum {
		Tickfile = 1,
		RealtimeData = 2,
		ExchangeSimulator = 4,
		LiveOrderSubmission = 8,
		HistoricalData = 0x10,
		OrderPersistence = 0x20,
		ContractInfo = 0x40,
		Strategies = 0x80,
		MarketScanner = 0x100,
		News = 0x200,
		Account = 0x400,
		SecondaryContractInfo = 0x800
    } ServiceProviderTypes;

    typedef [uuid(d8fee7c0-401e-454e-910a-1d16a3a75685), 
	version(1.0)]
    enum {

		[helpstring("Tickfile is empty")]
    	TFTickfileEmpty = 2000,		

		[helpstring("Tickfile structure doesn't correspond to format id")]
    	TFTickfileInvalid = 2001,	

		[helpstring("The version of tickfile is not supported")]
    	TFTickfileVersionNotSupported = 2002,
                            		
		[helpstring("The tickfile contains invalid contract details")]
    	TFContractDetailsInvalid = 2003,	

		[helpstring("The tickfile contains no contract details")]
    	TFNoContractDetails = 2004,	

		[helpstring("The specified tickfile does not exist")]
    	TFTickfileDoesntExist = 2005,

		[helpstring("Unable to connect to the tickfile's data source")]
    	TFCantConnectDataSource = 2006,

		[helpstring("The tickfile's data source is no longer responding or sending data")]
    	TFDataSourceNotResponding = 2007,

		[helpstring("Trying again to connect to the tickfile's data source")]
    	TFRetryConnectDataSource = 2008,

		[helpstring("The contract specifier in the tickfile specifier does not refer to a valid contract")]
    	TFContractSpecifierInvalid = 2009,

		[helpstring("Trying to reconnect to the tickfile's data source")]
    	TFReConnectingDataSource = 2010,

		[helpstring("Lost connection to the tickfile's data source")]
    	TFLostConnectionToDataSource = 2011,

		[helpstring("Connected to the tickfile's data source")]
    	TFConnectedToDataSource = 2012,

		[helpstring("Unable to connect to the contract data source")]
    	CICantConnectDataSource = 2100,

		[helpstring("Trying again to connect to the contract data source")]
    	CIRetryConnectDataSource = 2101,

		[helpstring("The contract specifier does not refer to a valid contract")]
    	CIContractSpecifierInvalid = 2102,

		[helpstring("Trying to reconnect to the contract data source")]
		CIReConnectingDataSource = 2103,
		
		[helpstring("Lost connection to the contract data source")]
    	CILostConnectionToDataSource = 2104,

		[helpstring("Disconnected from the contract data source")]
    	CIDisconnectedFromDataSource = 2105,

		[helpstring("Connected to the contract data source")]
    	CIConnectedToDataSource = 2106,

		[helpstring("Unable to connect to the historical data source")]
    	HDCantConnectDataSource = 2200,

		[helpstring("Trying again to connect to the historical data source")]
    	HDRetryConnectDataSource = 2201,

		[helpstring("Lost connection to the historical data source")]
    	HDLostConnectionToDataSource = 2202,

		[helpstring("Trying to reconnect to the historical data source")]
    	HDReConnectingDataSource = 2203,

		[helpstring("Historical data request is invalid")]
    	HDRequestInvalid = 2204,

		[helpstring("Disconnected from the historical data source")]
    	HDDisconnectedFromDataSource = 2205,

		[helpstring("Historical data request was not successful")]
    	HDRequestFailed = 2205,

		[helpstring("Connected to the historical data source")]
    	HDConnectedToDataSource = 2206,

		[helpstring("Unable to connect to the realtime data source")]
    	RTCantConnectDataSource = 2300,

		[helpstring("Trying again to connect to the realtime data source")]
    	RTRetryConnectDataSource = 2301,

		[helpstring("Lost connection to the realtime data source")]
    	RTLostConnectionToDataSource = 2302,

		[helpstring("Trying to reconnect to the realtime data source")]
    	RTReConnectingDataSource = 2303,

		[helpstring("Realtime data request is invalid")]
    	RTRequestInvalid = 2304,

		[helpstring("Realtime data request was not successful")]
    	RTRequestFailed = 2305,

		[helpstring("Realtime market depth request was not successful")]
   		RTMarketDepthRequestFailed = 2306,

		[helpstring("Disconnected from the realtime data source")]
    	RTDisconnectedFromDataSource = 2307,

		[helpstring("The realtime data source is no longer responding or sending data")]
    	RTDataSourceNotResponding = 2308,

		[helpstring("Connected to the realtime data source")]
    	RTConnectedToDataSource = 2309,

		[helpstring("Unable to connect to the broker")]
    	LOCantConnectToBroker = 2400,

		[helpstring("Trying again to connect to the broker")]
    	LORetryConnectToBroker = 2401,

		[helpstring("Lost connection to the broker")]
    	LOLostConnectionToBroker = 2402,

		[helpstring("Trying to reconnect to the broker")]
    	LOReConnectingToBroker = 2403,

		[helpstring("Unknown contract")]
    	LOUnknownContract = 2404,

		[helpstring("Not unique contract")]
    	LONotUniqueContract = 2406,

		[helpstring("Disconnected from the broker")]
    	LODisconnectedFromBroker = 2408,

		[helpstring("Connected to the broker")]
    	LOConnectedToBroker = 2409,

		[helpstring("Order deferred")]
    	LOOrderDeferred = 2410

   } StandardSPEventCodes;

    typedef [uuid(777ae18f-8de7-40fd-95d4-003f88c7f381), 
	version(1.0)]
    enum {
        StopTriggerDefault = 1,
        StopTriggerDoubleBidAsk = 2,
		StopTriggerLast = 4,
		StopTriggerDoubleLast = 8,
		StopTriggerBidAsk = 16,
		StopTriggerLastOrBidAsk = 32,
		StopTriggerMidPoint=64
    } StopTriggerMethods;

    typedef [uuid(b1aef3b7-a908-448e-a827-4ab8454f67b4), 
	version(1.0)]
    enum {
        ReasonNone = 0,
        ReasonAsk = 1,
		ReasonBid = 2,
		ReasonTrade = 3,
		ReasonVolume = 4,
		ReasonClockTick = 5, 
		ReasonSessionStart = 10,
		ReasonSessionEnd = 11
    } StrategyInvokeReasons;

    typedef [uuid(8139f349-68b8-4e48-bf72-2dc4cdaeb8a8), 
	version(1.0)]
    enum {
        FileBased = 1,
        StreamBased = 2
    } TickfileFormatTypes;

    typedef [uuid(810E7E7B-C092-48CB-B5B1-B48443DD8D08), version(1.0)]
    enum {
        Record = 1,
        RecordMarketDepth = 2,
        Replay = 4,
        PositionExact = 8,
        ReplayMarketDepth = 16,
	ReportReplayProgress = 32,
	SaveContractInformation = 64
    } TickfileServiceProviderCapabilities;

    typedef [uuid(0EB43BAD-8A73-4B1E-B9A3-B87E89583CC9), 
	version(1.0)]
    enum {
        TickfileNotPlaying = 0,
        TickfilePlaying = 1,
        TickfilePaused = 2
    } TickfileStateCodes;

// Types*************************************************************   

    typedef [uuid(c7fb9add-a3d6-48e4-b4e4-b5bf2b2168b2), version(1.0)]
    struct tagServiceProviderDetails {
        BSTR Comments;
		BSTR Vendor;
		BSTR EXEName;
		BSTR FileDescription;
		BSTR LegalCopyright;
		BSTR LegalTrademarks;
		long VersionMajor;
		long VersionMinor;
		long VersionRevision;
		long Path;
		long ProductName;
    } ServiceProviderDetails;

    typedef [uuid(50e309ce-2461-45bd-b9be-8ae0312905b9), version(1.0)]
    struct tagTickfileFormatSpecifier {

        [helpstring("Indicates the type of tickfile format")]
		TickfileFormatTypes FormatType;

        [helpstring("Bitmask of TickfileServiceProviderCapabilities values indicating the capabilities supported by this tickfile format")]
		long Capabilities;

        [helpstring("The unique id identifying this tickfile format")]
        BSTR FormalID;

        [helpstring("The informal (human readable but not necessarily unique) name for this tickfile format")]
        BSTR Name;

		[helpstring("For file-based tickfile formats, this is the filename extension used to identify tickfiles in this format")]
		BSTR FileExtension;
    } TickfileFormatSpecifier;

// Interfaces *************************************************************************

    [
      uuid(792b8ea3-3e91-4461-9f6e-ed28d34ebfc7),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Service Providers that supply market data consolidated into bars")
    ]
    interface IBarDataConsumer : IUnknown {

		// Methods =====================================================

        HRESULT Bar(
            [in] Bar* pData,
			[in] TimePeriod* pBarTimePeriod);

    };

    [
      uuid(b28ed913-546d-42fb-a495-f0aa0b1ded1f),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Bar Data Readers")
    ]
    interface IBarDataInputServiceConsumer : IUnknown {

		// Methods =====================================================

		HRESULT NotifyEvent(
			[in] StandardSPEventCodes pEventCode,
			[in] BSTR pEventMessage,
			[in] long pServiceProviderHandle);

		HRESULT Ready();

        HRESULT BarDataComplete();

        HRESULT Progress(
			[in] long pBarsRetrieved,
			[in] float pPercentComplete);

    };

    [
      uuid(e8639452-d193-4201-8f31-d4329cb3497c),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Bar Data Writers")
    ]
    interface IBarDataOutputServiceConsumer : IUnknown {

		// Properties ==================================================


		// Methods =====================================================

		HRESULT NotifyEvent(
			[in] StandardSPEventCodes pEventCode,
			[in] BSTR pEventMessage,
			[in] long pServiceProviderHandle);

        HRESULT NotReady();

        HRESULT OutputBarfileCreated(
            [in] BSTR pFilename);

        HRESULT Ready();

		HRESULT RequiredTimePeriod(
			[in] TimePeriod* pTimeframe,
			[in] long pSaveIntervalSeconds);

    };

    [
      uuid(43e4982a-b79c-4b64-a3ce-3d241fcb944a),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Bar Data Readers")
    ]
    interface IBarDataReader : IUnknown {

		// Properties ==================================================

        [propget]
        HRESULT BarDataSpecifier(
            [out, retval] BarDataSpecifier** );

		[propget]
		HRESULT NumberOfBars(
			[out,retval] long* );

		// Methods =====================================================

		HRESULT CancelFetch();

		HRESULT FetchBars(
				[in] BarDataSpecifier* pBarSpecifier);

		HRESULT ReleaseDataStore();

		HRESULT FireNextBar();

        HRESULT Supports(
                        [in] long pCapabilities, 
                        [out, retval] VARIANT_BOOL* );
    };

    [
      uuid(6ed71d32-5b6d-4048-acd7-d49080fcd6e4),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Bar Data Service Providers")
    ]
    interface IBarDataServiceProvider : IUnknown {

		// Properties ==================================================

        [propget]
		HRESULT SupportedTimePeriods(
            [out, retval] SAFEARRAY(TimePeriod*)* );

		// Methods =====================================================

        HRESULT CreateBarDataReader(
			[in] IBarDataConsumer* pDataConsumer,
			[in] IBarDataInputServiceConsumer* pServiceConsumer,
			[out, retval] IBarDataReader** );

        HRESULT CreateBarDataWriter(
			[in] IBarDataOutputServiceConsumer* pServiceConsumer,
			[in] Contract* pContract,
            [in, optional, defaultvalue("")] BSTR pLocation, 
            [out, retval] IBarDataWriter** );

		HRESULT IsSupportedTimePeriod(
            [in] TimePeriod* pPeriod, 
            [out, retval] VARIANT_BOOL* );

        HRESULT Supports(
            [in] long pCapabilities, 
            [out, retval] VARIANT_BOOL* );

    };

    [
      uuid(4c1da235-2896-45c4-b5d5-f9e87c904056),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Bar Writers")
    ]
    interface IBarDataWriter : IUnknown {

		// Properties ==================================================

        [propget]
        HRESULT ContractSpecifier([out, retval] ContractSpecifier** );

		// Methods =====================================================

		HRESULT ReleaseDataStore();

        HRESULT WriteBar(
			[in] Bar* pData,
			[in] BarTypes pBarType,
			[in] TimePeriod* pBarTimePeriod);

    };

    [
      uuid(0d39f668-74e4-4eff-93ee-a10ebc859a0a),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild for common functions to be called by any Service Provider")
    ]
    interface ICommonServiceConsumer : IUnknown {

	// Methods =====================================================

		HRESULT NotifyEvent(
			[in] StandardSPEventCodes pEventCode,
			[in] BSTR pEventMessage,
			[in] long pServiceProviderHandle);

		HRESULT NotifyFatalError(
			[in] long pErrorCode,
			[in] BSTR pSsource,
			[in] BSTR pErrorMessage,
			[in] long pServiceProviderHandle);

		HRESULT NotifyRecoverableError(
			[in] long pErrorCode,
			[in] BSTR pErrorMessage,
			[in] long pServiceProviderHandle);

		HRESULT RegisterServiceProvider(
			[in] long pHandle,
			[in] ServiceProviderTypes pSpType);

    };

    [
      uuid(967fccaa-3d6c-4e82-82ad-b0be3b6e47cb),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by all Service Providers")
    ]
    interface ICommonServiceProvider : IUnknown {

	// Properties ==================================================

		[propput]
		HRESULT Name([in] BSTR );

		[propget]
		HRESULT Name([out, retval] BSTR* );

		[propget]
		HRESULT Details([out, retval] ServiceProviderDetails* );

	// Methods =====================================================

        HRESULT Link(
			[in] ICommonServiceConsumer* pCommonServiceConsumer,
			[in] long pHandle,
			[in] Parameters* pParams);

		HRESULT Terminate();

    };

     [
      uuid(8afff4c8-1c22-4b52-9d13-48f4a3b86655),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be provided by TradeBuild to Contract Info Service Providers")
    ]
    interface IContractInfoServiceConsumer : IUnknown {

		// Properties ==================================================


		// Methods =====================================================

		HRESULT NotifyEvent(
			[in] StandardSPEventCodes pEventCode,
			[in] BSTR pEventMessage,
			[in] long pServiceProviderHandle);

		HRESULT LoadComplete(
			[in] long pServiceProviderHandle);

    };

    [
      uuid(657ab51f-eec5-42b4-b71b-7001ecae3d24),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Contract Info Service Providers")
    ]
    interface IContractInfoServiceProvider : IUnknown {

		// Properties ==================================================

		// Methods =====================================================

        HRESULT RequestContractDetails(
			[in] IContractInfoServiceConsumer* pServiceConsumer,
			[in] ContractsBuilder* pContractsBuilder);

		HRESULT StoreContractDetails(
			[in] IContractInfoServiceConsumer* pServiceConsumer,
			[in] Contract* pContract);

        HRESULT Supports(
                        [in] long pCapabilities, 
                        [out, retval] VARIANT_BOOL* );

    };

	[
      uuid(86AAA34F-66D8-46D7-AC1E-AC094F83169F),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by ExecutionReport classes")
    ]
    interface IExecutionReport : IUnknown {

	// Properties ==================================================

		[propget]
        HRESULT AccountIdentifier([out, retval] BSTR*  );

		[propget]
        HRESULT Action([out, retval] OrderActions*  );

		[propget]
        HRESULT ExecId([out, retval] BSTR*  );

		[propget]
        HRESULT FillingExchange([out, retval] BSTR* );

		[propget]
        HRESULT FillTime([out, retval] DATE* );

		[propget]
        HRESULT IsLiquidation([out, retval] VARIANT_BOOL* );

		[propget]
        HRESULT OrderBrokerId([out, retval] BSTR* );

		[propput]
        HRESULT OrderTradeBuildId([in] BSTR );

		[propget]
        HRESULT OrderTradeBuildId([out, retval] BSTR* );

		[propget]
        HRESULT Price([out, retval] double* );

		[propget]
        HRESULT Quantity([out, retval] long* );

        [propget]
        HRESULT SecurityName([out, retval] BSTR* ); 

		[propget]
		HRESULT Timezone([out, retval] BSTR*);

	};

	[
      uuid(a0f1ab28-facb-4c2c-ad04-0cc504cbcca2),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Order classes")
    ]
    interface IOrder : IUnknown {

	// Properties ==================================================

        [propget]
        HRESULT Action([out, retval] OrderActions* );

        [propget]
        HRESULT AllOrNone([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT BlockOrder([out, retval] VARIANT_BOOL* );

        [propput]
        HRESULT BrokerId([in] BSTR );

        [propget]
        HRESULT BrokerId([out, retval] BSTR* );

        [propget]
        HRESULT Contract([out, retval] Contract** );

        [propget]
        HRESULT DisplaySize([out, retval] long* );

        [propget]
        HRESULT DiscretionaryAmount([out, retval] double* );

        [propget]
        HRESULT ETradeOnly([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT FirmQuoteOnly([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT GoodAfterTime([out, retval] DATE* );

        [propget]
        HRESULT GoodAfterTimeTZ([out, retval] BSTR* );

        [propget]
        HRESULT GoodTillDate([out, retval] DATE* );

        [propget]
        HRESULT GoodTillDateTZ([out, retval] BSTR* );

        [propget]
        HRESULT Hidden([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT IgnoreRegularTradingHours([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT LimitPrice([out, retval] double* );

        [propget]
        HRESULT MinimumQuantity([out, retval] long* );

        [propget]
        HRESULT NbboPriceCap([out, retval] double* );

        [propget]
        HRESULT OriginatorRef([out, retval] BSTR* );

        [propget]
        HRESULT OrderType([out, retval] OrderTypes* );

        [propget]
        HRESULT Origin([out, retval] OrderOrigins* );

        [propget]
        HRESULT OverrideConstraints([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT ProviderProperties([out,retval] Parameters** );

        [propget]
        HRESULT Quantity([out, retval] long* );

        [propget]
        HRESULT QuantityFilled([out, retval] long* );

        [propget]
        HRESULT QuantityRemaining([out, retval] long* );

        [propget]
        HRESULT SettlingFirm([out, retval] BSTR* );

        [propget]
        HRESULT Status([out, retval] OrderStatuses* );

		[propget]
        HRESULT StopTriggerMethod([out, retval] StopTriggerMethods* );

        [propget]
        HRESULT SweepToFill([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT TimeInForce([out, retval] OrderTifs* );

        [propget]
        HRESULT TradeBuildId([out, retval] BSTR* );

        [propget]
        HRESULT TriggerPrice([out, retval] double* );

	// Methods =====================================================

    };

 	[
      uuid(B5539FC7-B705-40EE-A253-14D8D4F5D635),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by the Order Persistence Service Consumer")
    ]
    interface IOrderPersistenceServiceConsumer : IUnknown {

	// Methods =====================================================

		HRESULT PersistedOrderInfo(
			[in] BSTR* pOrderInfo);

		HRESULT PersistedOrderInfoEnd();

	};

 	[
      uuid(F377F6B1-E06F-4B7B-B5BC-19156B5A8A37),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Order Persistence Service Providers")
    ]
    interface IOrderPersistenceServiceProvider : IUnknown {

	// Properties ==================================================

		[propput]
		HRESULT OrderPersistenceServiceConsumer(
			[in] IOrderPersistenceServiceConsumer pOrderPersistenceServiceConsumer);

	// Methods =====================================================

		HRESULT SaveOrderInfo(
			[in] BSTR* pOrderInfo);

		HRESULT RequestOrderInfo(
			[in] BSTR* pScopeName);

		HRESULT StartSession(
			[in] BSTR* pSessionId);

	};

    [
      uuid(049129f6-ba7c-4373-a92d-580ac0714ba0),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface of the Order Plex object")
    ]
	interface IOrderPlex : IDispatch {

	// Properties ==================================================

	[propget]
	HRESULT CloseoutOrder([out, retval] IOrder** );

	[propget]
	HRESULT EntryOrder([out, retval] IOrder** );

	[propget]
	HRESULT Key([out, retval] BSTR* );

	[propget]
	HRESULT Order(
		[in] long pIndex, 
		[out, retval] IOrder** );

	[propget]
	HRESULT NumberOfOrders([out, retval] long* );

	[propget]
	HRESULT State([out,retval] OrderPlexStateCodes*);

	[propget]
	HRESULT Stoporder([out, retval] IOrder** );

	[propget]
	HRESULT TargetOrder([out, retval] IOrder** );

    };

 	[
      uuid(2a20fdd3-8d84-4046-bdcf-a76d856b565c),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by the Order Recovery Service Consumer")
    ]
    interface IOrderRecoveryServiceConsumer : IUnknown {

	// Methods =====================================================

		HRESULT OrderReport(
			[in] IOrderReport* pOrderReport);

		HRESULT ExecutionReport(
			[in] IExecutionReport* pExecutionReport );

		HRESULT ExecutionReportsComplete();

		HRESULT OrderReportsComplete();

	};

	[
      uuid(58e09650-1764-492b-8734-953c9ad09689),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by OrderReport classes")
    ]
    interface IOrderReport : IUnknown {

	// Properties ==================================================

        [propget]
        HRESULT Action([out, retval] OrderActions* );

        [propput]
        HRESULT Action([in] OrderActions );

        [propget]
        HRESULT AllOrNone([out, retval] VARIANT_BOOL* );

        [propput]
        HRESULT AllOrNone([in] VARIANT_BOOL );

        [propget]
        HRESULT BlockOrder([out, retval] VARIANT_BOOL* );

        [propput]
        HRESULT BlockOrder([in] VARIANT_BOOL );

        [propget]
        HRESULT BrokerId([out, retval] BSTR* );

        [propput]
        HRESULT BrokerId([in] BSTR );

        [propget]
        HRESULT ContractSpecifier([out, retval] ContractSpecifier** );

        [propput]
        HRESULT ContractSpecifier([in] ContractSpecifier* );

        [propget]
        HRESULT DisplaySize([out, retval] long* );

        [propput]
        HRESULT DisplaySize([in] long );

        [propget]
        HRESULT DiscretionaryAmount([out, retval] double* );

        [propput]
        HRESULT DiscretionaryAmount([in] double );

        [propget]
        HRESULT ETradeOnly([out, retval] VARIANT_BOOL* );

        [propput]
        HRESULT ETradeOnly([in] VARIANT_BOOL );

        [propget]
        HRESULT FirmQuoteOnly([out, retval] VARIANT_BOOL* );

        [propput]
        HRESULT FirmQuoteOnly([in] VARIANT_BOOL );

        [propget]
        HRESULT GoodAfterTime([out, retval] DATE* );

        [propput]
        HRESULT GoodAfterTime([in] DATE );

        [propget]
        HRESULT GoodAfterTimeTZ([out, retval] BSTR* );

        [propput]
        HRESULT GoodAfterTimeTZ([in] BSTR );

        [propget]
        HRESULT GoodTillDate([out, retval] DATE* );

        [propput]
        HRESULT GoodTillDate([in] DATE );

        [propget]
        HRESULT GoodTillDateTZ([out, retval] BSTR* );

        [propput]
        HRESULT GoodTillDateTZ([in] BSTR );

        [propget]
        HRESULT Hidden([out, retval] VARIANT_BOOL* );

        [propput]
        HRESULT Hidden([in] VARIANT_BOOL );

        [propget]
        HRESULT IgnoreRegularTradingHours([out, retval] VARIANT_BOOL* );

        [propput]
        HRESULT IgnoreRegularTradingHours([in] VARIANT_BOOL );

        [propget]
        HRESULT LimitPrice([out, retval] double* );

        [propput]
        HRESULT LimitPrice([in] double );

        [propget]
        HRESULT MinimumQuantity([out, retval] long* );

        [propput]
        HRESULT MinimumQuantity([in] long );

        [propget]
        HRESULT NbboPriceCap([out, retval] double* );

        [propput]
        HRESULT NbboPriceCap([in] double );

        [propget]
        HRESULT OriginatorRef([out, retval] BSTR* );

        [propput]
        HRESULT OriginatorRef([in] BSTR );

        [propget]
        HRESULT OrderType([out, retval] OrderTypes* );

        [propput]
        HRESULT OrderType([in] OrderTypes );

        [propget]
        HRESULT Origin([out, retval] OrderOrigins* );

        [propput]
        HRESULT Origin([in] OrderOrigins );

        [propget]
        HRESULT OverrideConstraints([out, retval] VARIANT_BOOL* );

        [propput]
        HRESULT OverrideConstraints([in] VARIANT_BOOL );

        [propget]
        HRESULT ProviderProperties([out,retval] Parameters** );

        [propput]
        HRESULT ProviderProperties([in] Parameters* );

        [propget]
        HRESULT Quantity([out, retval] long* );

        [propput]
        HRESULT Quantity([in] long );

        [propget]
        HRESULT SettlingFirm([out, retval] BSTR* );

        [propput]
        HRESULT SettlingFirm([in] BSTR );

        [propget]
        HRESULT Status([out, retval] OrderStatuses* );

        [propput]
        HRESULT Status([in] OrderStatuses );

		[propget]
        HRESULT StopTriggerMethod([out, retval] StopTriggerMethods* );

		[propput]
        HRESULT StopTriggerMethod([in] StopTriggerMethods );

        [propget]
        HRESULT SweepToFill([out, retval] VARIANT_BOOL* );

        [propput]
        HRESULT SweepToFill([in] VARIANT_BOOL );

        [propget]
        HRESULT TimeInForce([out, retval] OrderTifs* );

        [propput]
        HRESULT TimeInForce([in] OrderTifs );

        [propget]
        HRESULT TradeBuildId([out, retval] BSTR* );

        [propput]
        HRESULT TradeBuildId([in] BSTR );

        [propget]
        HRESULT TriggerPrice([out, retval] double* );

        [propput]
        HRESULT TriggerPrice([in] double );

	// Methods =====================================================

    };

	[
      uuid(92E9A7DC-1BD1-44C8-965E-4279EED83265),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by OrderStatusReport classes")
    ]
    interface IOrderStatusReport : IUnknown {

	// Properties ==================================================

        [propget]
        HRESULT OrderId([out, retval] BSTR* ); 

		[propget]
        HRESULT Status([out, retval] OrderStatuses* );
	};

    [
      uuid(19cc1663-8606-49c7-ba8b-9ecdce6dedc0),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Order Submission Service Consumers")
    ]
    interface IOrderSubmissionSrvcConsumer : IUnknown {

	// Methods =====================================================

	HRESULT CancelTickData(
		[in] IStreamingDataConsumer* pConsumer);

	HRESULT NotifyEvent(
		[in] StandardSPEventCodes pEventCode,
		[in] BSTR pEventMessage,
		[in] long pServiceProviderHandle);

	HRESULT ExecutionReport(
		[in] IExecutionReport* pExecutionReport );

	HRESULT NotReady();

	HRESULT OrderReport(
		[in] IOrderReport* pOrderReport );

	HRESULT OrderStatusReport(
		[in] IOrderStatusReport* pOrderStatusReport );

	HRESULT PreFill(
		[in] BSTR pOrderId, 
		[in, out] double* pFillPrice, 
		[in, out] long* pFillSize);

	HRESULT Ready();

	HRESULT RejectOrder(
		[in] BSTR pOrderId, 
		[in] BSTR pReason);

	HRESULT RequestTickData(
		[in] IStreamingDataConsumer* pConsumer, 
		[in] VARIANT_BOOL pIncludeMarketDepth);

	};

    [
      uuid(5dc8a1fd-a579-40b8-ae1c-8203bc9d75c8),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Order Submission Service Providers")
    ]
    interface IOrderSubmissionSrvcProvider : IUnknown {

	// Properties ==================================================

	// Methods =====================================================

	HRESULT CreateOrderSubmitter(
		[in] IOrderSubmissionSrvcConsumer* pServiceConsumer, 
		[in] Contract* pContract, 
		[out, retval] IOrderSubmitter** );

	HRESULT StartOrderRecovery(
		[in] IOrderRecoveryServiceConsumer* pOrderRecoveryServiceConsumer,
		[in] Date pStartFrom);

	};

    [
      uuid(bc237c88-18c2-4594-8558-686c5a36ee63),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Order Submitters")
    ]
    interface IOrderSubmitter : IUnknown {

	// Properties ==================================================

	[propput]
	HRESULT ClockRate([in] float);

	[propget]
	HRESULT PermittedOrderAttributes([out, retval] long* );

	[propget]
	HRESULT PermittedOrderTifs([out, retval] long* );

	[propget]
	HRESULT PermittedOrderTypes([out, retval] long* );

	[propget]
	HRESULT PermittedStopTriggerMethods([out, retval] long* );

	// Methods =====================================================

	HRESULT CancelOrderPlex(
		[in] IOrderPlex* pOrderPlex, 
		[out, retval] VARIANT_BOOL* );

	HRESULT CancelStopOrder([in] IOrderPlex* pOrderPlex);

	HRESULT CancelTargetOrder([in] IOrderPlex* pOrderPlex);

	HRESULT ExecuteOrderPlex([in] IOrderPlex* pOrderPlex);

	HRESULT ModifyOrderPlex(
		[in] IOrderPlex* pOrderPlex, 
		[in] VARIANT_BOOL pEntryOrderChanged, 
		[in] VARIANT_BOOL pStopOrderChanged, 
		[in] VARIANT_BOOL pTargetOrderChanged, 
		[in] VARIANT_BOOL pCloseoutOrderChanged);

	HRESULT Finish();

	HRESULT ResubmitStopAndTargetOrders([in] IOrderPlex* pOrderPlex);

	HRESULT ResubmitStopOrder([in] IOrderPlex* pOrderPlex);

	HRESULT ResubmitTargetOrder([in] IOrderPlex* pOrderPlex);
};

     [
      uuid(4f690d6e-0742-46c0-9c2d-379c2a827aa4),
      version(1.0),
      nonextensible,
      helpstring("Provides the control interface into TradeBuild to be called by Realtime Data Readers")
    ]
    interface IRealtimeDataInputServiceConsumer : IUnknown {

	// Methods =====================================================

	HRESULT NotifyEvent(
			[in] StandardSPEventCodes pEventCode,
			[in] BSTR pEventMessage,
			[in] long pServiceProviderHandle);

    };


    [
      uuid(de66f953-6909-42b8-aba3-157c5980fff4),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Realtime Data Readers")
    ]
    interface IRealtimeDataReader : IUnknown {

		// Methods =====================================================

		HRESULT StartData(
						[in] Contract* contract, 
			[in] DOMEventTypes pDomEventsRequired);

		HRESULT StartMarketDepth(
			[in] DOMEventTypes pDomEventsRequired);

		HRESULT StopData();

		HRESULT StopMarketDepth();

		HRESULT Supports(
						[in] long pCapabilities, 
						[out, retval] VARIANT_BOOL* );

    };


    [
      uuid(3d543626-71e7-4246-824f-4d0b84c2206f),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Realtime Data Service Providers")
    ]
    interface IRealtimeDataServiceProvider : IUnknown {

		// Methods =====================================================

        HRESULT CreateRealtimeDataReader(
			[in] IStreamingDataConsumer* pDataConsumer,
			[in] IRealtimeDataInputServiceConsumer* pServiceConsumer,
			[out, retval] IRealtimeDataReader** );

        HRESULT Supports(
                        [in] long pCapabilities, 
                        [out, retval] VARIANT_BOOL* );

    };

      [
      uuid(b5346903-42bb-47f2-a512-e536dac2068a),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Service Providers that supply streaming market data")
    ]
    interface IStreamingDataConsumer : IUnknown {

		// Methods =====================================================

		HRESULT Tick(
			[in, out] GenericTick* pTick);

    };

    [
      uuid(c910cd98-f7ea-407e-9f55-e9c3f0cd846b),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Tickfile Service Readers")
    ]
    interface ITickfileInputServiceConsumer : IUnknown {

		// Methods =====================================================

		HRESULT NotifyEvent(
			[in] StandardSPEventCodes pEventCode,
			[in] BSTR pEventMessage,
			[in] long pServiceProviderHandle);

		HRESULT Ready(                            
			[in] ITickfileSpecifier* pTickfileSpec,
			[in] long pTickfileSizeBytes);

        HRESULT TickfileReplayComplete();

        HRESULT ReplayProgress(
			[in] DATE pTimestamp,
			[in] long pEventsPlayed,
			[in] float pPercentComplete);

    };

    [
      uuid(2f0370b1-3173-46ee-b087-35583acb6864),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Tickfile Writers")
    ]
    interface ITickfileOutputServiceConsumer : IUnknown {

		// Properties ==================================================

		// Methods =====================================================

		HRESULT NotifyEvent(
			[in] StandardSPEventCodes pEventCode,
			[in] BSTR pEventMessage,
			[in] long pServiceProviderHandle);

        HRESULT NotReady();

        HRESULT Ready();

        HRESULT OutputTickfileCreated(
                        [in] BSTR pFilename);

    };

    [
      uuid(0909b6e7-903f-496f-b04d-dfeb4ac4b39f),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Readers")
    ]
    interface ITickfileReader : IUnknown {

		// Properties ==================================================

        [propget]
        HRESULT Contract(
                        [out, retval] Contract** );

        [propput]
        HRESULT Contract([in] Contract* );

        [propget]
        HRESULT ContractSpecifier(
                        [out, retval] ContractSpecifier** );

        [propget]
        HRESULT FirstTickFileTime(
                        [out, retval] DATE* );

        [propget]
        HRESULT InputTickfileSpecifier(
                        [out, retval] ITickfileSpecifier** );

        [propput]
        HRESULT ReplayProgressEventFrequency(
                        [in] long );

        [propget]
        HRESULT ReplayProgressEventFrequency(
                        [out, retval] long* );

		[propget]
		HRESULT TickfileSizeBytes(
			[out,retval] long* );

	// Methods =====================================================

		HRESULT CloseInputFile();

		HRESULT FireNextTick();

        HRESULT ReplayTickfile(
                        [in] ITickfileSpecifier* pTickfileSpecifier);

        HRESULT Supports(
                        [in] long pCapabilities, 
                        [in, optional] BSTR pFormatIdentifier, 
                        [out, retval] VARIANT_BOOL* );
    };

    [
      uuid(F14743E6-6551-40B3-AFF0-82C5FC47FF0C),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Service Providers")
    ]
    interface ITickfileServiceProvider : IUnknown {

		// Properties ==================================================

        [propget]
        HRESULT SupportedFormats(
			[out, retval] SAFEARRAY(TickfileFormatSpecifier)* );

		// Methods =====================================================


        HRESULT CreateTickfileReader(
			[in] IStreamingDataConsumer* pDataConsumer,
			[in] ITickfileInputServiceConsumer* pServiceConsumer,
            [in] BSTR pFormatIdentifier, 
			[out, retval] ITickfileReader** );

        HRESULT CreateTickfileWriter(
			[in] ITickfileOutputServiceConsumer* pServiceConsumer,
			[in] Contract* pContract,
            [in, optional, defaultvalue("")] BSTR pFormatIdentifier, 
            [in, optional, defaultvalue("")] BSTR pLocation, 
            [out, retval] ITickfileWriter** );

        HRESULT Supports(
                        [in] long pCapabilities, 
                        [in, optional] BSTR pFormatIdentifier, 
                        [out, retval] VARIANT_BOOL* );

    };

    [
      uuid(d406d86d-78c3-4df9-ba52-429c689f822f),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Specifier objects")
    ]
    interface ITickfileSpecifier : IUnknown {

        [propput,
		 helpstring("Identifies the tickfile format")]
		HRESULT TickfileFormatID([in] BSTR) ;

        [propget,
		 helpstring("Identifies the tickfile format")]
		HRESULT TickfileFormatID([out, retval] BSTR*) ;

        [propput,
		 helpstring("For file-based tickfile formats, contains the full path and filename of the tickfile")]
		HRESULT Filename([in] BSTR) ;

        [propget,
		 helpstring("For file-based tickfile formats, contains the full path and filename of the tickfile")]
		HRESULT Filename([out, retval] BSTR*) ;

        [propput,
		 helpstring("For stream-based tickfile formats, contains the contract for the tickstream")]
        HRESULT Contract([in] Contract*) ;

        [propget,
		 helpstring("For stream-based tickfile formats, contains the contract for the tickstream")]
        HRESULT Contract([out, retval] Contract**) ;

        [propput,
		 helpstring("For stream-based tickfile formats, specifies the start date and time for the tickstream")]
        HRESULT FromDate([in] DATE) ;

        [propget,
		 helpstring("For stream-based tickfile formats, specifies the start date and time for the tickstream")]
        HRESULT FromDate([out, retval] DATE*) ;

        [propput,
		 helpstring("For stream-based tickfile formats, specifies the end date and time for the tickstream")]
        HRESULT ToDate([in] DATE) ;

        [propget,
		 helpstring("For stream-based tickfile formats, specifies the end date and time for the tickstream")]
        HRESULT ToDate([out, retval] DATE*) ;

		[propput,
		 helpstring("Indicates that the timespan is the whole of the session in which the From value falls")]
		HRESULT EntireSession([in] VARIANT_BOOL) ;

		[propget,
		 helpstring("Indicates that the timespan is the whole of the session in which the From value falls")]
		HRESULT EntireSession([out, retval] VARIANT_BOOL*) ;

    };

    [
      uuid(23156A1B-88C6-48B9-B9E3-1F4C143D8344),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Writers")
    ]
    interface ITickfileWriter : IUnknown {

		// Properties ==================================================

		// Methods =====================================================

        HRESULT CloseOutputFile();

		HRESULT WriteTick(
			[in, out] GenericTick* pTick);


    };


};
