// typelib filename: TradeBuildSP26.tlb

[
  uuid(872e3a7f-9b81-4863-8699-ee01860c59ed),
  version(3.0),
  helpstring("TradeBuild 2.6 Service Provider Interface Type Library")
]
library TradeBuildSP
{
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

	// TradeWright Utilities
	importlib("C:\Projects\TradeWright Common\TWUtilities\TWUtilities30.dll");
	
	// TradeWright Contract Utilities
	importlib("C:\Projects\TradeBuild Platform\ContractUtils\ContractUtils26.dll");
	
	// TradeWright Timeframe Utilities
	importlib("C:\Projects\TradeBuild Platform\TimeframeUtils\TimeframeUtils2-6.dll");
	
    // Forward declare all types defined in this typelib
    interface IBarDataConsumer;
    interface IBarDataInputServiceConsumer;
    interface IBarDataOutputServiceConsumer;
    interface IBarDataReader;
    interface IBarDataServiceProvider;
	interface IBarDataSpecifier;
    interface IBarDataWriter;
    interface ICommonServiceConsumer;
    interface ICommonServiceProvider;
    //interface IContract;
    //interface IContracts;
    //interface IContractSpecifier;
    //interface IComboLegs;
    //interface IComboLeg;
    interface IContractInfoServiceConsumer;
    interface IContractInfoServiceProvider;
    //interface IExecution;
    interface IOrder;
    interface IOrderPlex;
    interface IOrderSubmissionSrvcConsumer;
    interface IOrderSubmissionSrvcProvider;
    interface IOrderSubmitter;
    interface IRealtimeDataInputServiceConsumer;
    interface IRealtimeDataReader;
    interface IRealtimeDataServiceProvider;
    interface IStreamingDataConsumer;
    interface ITickfileInputServiceConsumer;
    interface ITickfileOutputServiceConsumer;
    interface ITickfileReader;
    interface ITickfileServiceProvider;
    interface ITickfileSpecifier;
    interface ITickfileWriter;

// Enums *************************************************************************

    typedef [uuid(cb987243-e48a-4f5a-90c5-1b36217268e8), version(1.0)]
    enum {
        BarTypeTrade = 0,
        BarTypeBid = 1,
        BarTypeAsk = 2
    } BarTypes;

    typedef [uuid(85d2b0ef-7649-40bb-abb6-a0813d43597f), version(1.0)]
    enum {
		BulletinNews = 1,
		BulletinExchangeUnavailable = 2,
		BulletinExchangeAvailable = 3
    } BulletinTypes;

    typedef [uuid(892d802e-490e-401c-b12c-8a313e004ce8), version(1.0)]
    enum {
        Store = 1
    } ContractInfoServiceProviderCapabilities;

	typedef [uuid(e5be4e16-1e30-4aaa-8be2-35bd02206256), version(1.0)]
	enum {
		DisplayNone = 0,
		displayAsPoints = 1,
		DisplayAsLines = 2,
		DisplayAsSteppedLines = 3,
		displayAsHistogram = 4
	} DisplayModes;

    typedef [uuid(170DD609-38C8-49DA-9096-33BA70A4ECDB), version(1.0)]
    enum {
        DOMNone = 0,
        DOMByPosition = 1,
        DOMByPrice = 2
    } DOMEventTypes;

    typedef [uuid(82212E6B-9D9C-4A44-ADB5-5F225CEA50B8), version(1.0)]
    enum {
        DOMInsert = 0,
        DOMUpdate = 1,
        DOMDelete = 2
    } DOMOperations;

    typedef [uuid(21DC1B1C-E06E-4741-AA29-3510A5DECF4A), version(1.0)]
    enum {
        DOMAsk = 0,
        DOMBid = 1,
        DOMLast = 2
    } DOMSides;

    typedef [uuid(e0132d3f-a956-484d-a703-062027df9f8d), version(1.0)]
    enum {
        HistDataStore = 1
    } HistoricDataServiceProviderCapabilities;

    typedef [uuid(CA5FFDA3-757C-4CB6-B86E-AD4C524E49D2), version(1.0)]
    enum {
        LegSamePos = 0,
        LegOpenPos = 1,
        LegClosePos = 2,
        LegUnknownPos = 3
    } LegOpenClose;

	typedef [uuid(bdeea36a-06c4-4683-b1e9-facfd4ff4352), version(1.0)]
	enum {
		LineSolid = 0,
		LineDash = 1,
		LineDot = 2,
		LineDashDot = 3,
		LineDashDotDot = 4,
		LineInvisible = 5,
		LineInsideSolid = 6
	} LineStyles;

    typedef [uuid(dd44a224-1338-455f-95b6-cdfe7b3e4884), version(1.0)]
    enum {
		LogLevelNone = 0,
		LogLevelLow = 1,
		LogLevelMedium = 2,
		LogLevelHigh = 3,
		LogLevelAll = 4
    } LogLevels;

    typedef [uuid(756ef079-7875-4ad8-90e2-ed3f4944ee05), version(1.0)]
    enum {
    	NoValidId = -1
    } Misc;

    //typedef [uuid(432653EE-39C0-4AEF-BE8E-F69213F3B41B), version(1.0)]
    //enum {
    //    OptNone = 0,
    //    OptCall = 1,
    //    OptPut = 2
    //} OptionRights;

	typedef [uuid(2c8981a4-675a-4a14-bb0b-f6573dcdce57), version(1.0)]
	enum {
		OpTrue = 0,
		OpLessThan = 1,
		OpEqual = 2,
		OpGreaterThan = 3,
		OpBetween = 4,
		OpLessThanPrevious = 5,
		OpEqualPrevious = 6,
		OpGreaterThanPrevious = 7,
		OpStartsWith = 8,
		OpContains = 9,
		OpEndsWith = 10,
		OpAnd = 11,
		OpOr = 12,
		OpXor = 13
	} Operators;

    typedef [uuid(9f77deb1-43ef-484a-8138-f029377382bf), version(1.0)]
    enum {
		ActionNone = 0,
		ActionBuy = 1,
		ActionSell = 2
    } OrderActions;

    typedef [uuid(ab15202e-686b-49ea-8ff9-7408a8ccfe77), version(1.0)]
    enum {
		OrderAttOpenClose		= 1,
		OrderAttOrigin			= 2,
		OrderAttOriginatorRef		= 4, 
		OrderAttBlockOrder		= 8,
		OrderAttSweepToFill		= 0x10,
		OrderAttDisplaySize		= 0x20,
		OrderAttIgnoreRTH		= 0x40,
		OrderAttHidden			= 0x80,
		OrderAttDiscretionaryAmount	= 0x100,
		OrderAttGoodAfterTime		= 0x200,
		OrderAttGoodTillDate		= 0x400,
		OrderAttRTHOnly			= 0x800,
		OrderAttRule80A			= 0x1000,
		OrderAttSettlingFirm		= 0x2000,
		OrderAttAllOrNone		= 0x4000,
		OrderAttMinimumQuantity		= 0x8000,
		OrderAttPercentOffset		= 0x10000,
		OrderAttETradeOnly		= 0x20000,
		OrderAttFirmQuoteOnly		= 0x40000,
		OrderAttNBBOPriceCap		= 0x80000,
		OrderAttOverrideConstraints 	= 0x100000,
		OrderAttAction 			= 0x200000,
		OrderAttLimitPrice 		= 0x400000,
		OrderAttOrderType 		= 0x800000,
		OrderAttQuantity 		= 0x1000000,
		OrderAttTimeInForce 		= 0x2000000,
		OrderAttTriggerPrice 		= 0x4000000,
		OrderAttGoodAfterTimeTZ		= 0x8000000,
		OrderAttGoodTillDateTZ		= 0x10000000,
		OrderAttStopTriggerMethod	= 0x20000000
    } OrderAttributes;

    typedef [uuid(ada7a6cd-f9ed-44ff-a29f-0f34dd6413d4), version(1.0)]
    enum {
		OriginCustomer = 0,
		OriginFirm = 1,
		OriginUnknown = 2
    } OrderOrigins;

    typedef [uuid(da605462-9db7-48cd-a876-777c58e18ac6), version(1.0)]
    enum {
		OrderStatusCreated = 0,
		OrderStatusRejected = 1,
		OrderStatusPendingSubmit = 2,
		OrderStatusPreSubmitted = 3,
		OrderStatusSubmitted = 4,
		OrderStatusFilled = 5,
		OrderStatusCancelling = 6,
		OrderStatusCancelled = 7
    } OrderStatuses;

    typedef [uuid(4eb50cca-7eb2-491e-8b73-22c1dba731d6), version(1.0)]
    enum {
		TIFDay 				= 1,
		TIFGoodTillCancelled 		= 2,
		TIFImmediateOrCancel 		= 4
    } OrderTifs;

    typedef [uuid(0B9D5098-388C-42B8-839D-C268A42457E9), version(1.0)]
    enum {
        OrderTypeNone 			= 0,
        OrderTypeMarket 		= 1,
        OrderTypeMarketOnClose 		= 2,
        OrderTypeLimit 			= 4,
        OrderTypeLimitOnClose 		= 8,
        OrderTypePeggedToMarket 	= 0x10,
        OrderTypeStop 			= 0x20,
        OrderTypeStopLimit 		= 0x40,
        OrderTypeTrail 			= 0x80,
        OrderTypeRelative 		= 0x100,
        OrderTypeVWAP 			= 0x200,
        OrderTypeMarketToLimit 		= 0x400,
        OrderTypeQuote 			= 0x800,
		OrderTypeAutoStop 		= 0x1000,
		OrderTypeAutoLimit 		= 0x2000,
		OrderTypeAdjust 		= 0x4000,
		OrderTypeAlert 			= 0x8000,
		OrderTypeLimitIfTouched 	= 0x10000,
		OrderTypeMarketIfTouched 	= 0x20000,
		OrderTypeTrailLimit 		= 0x40000,
		OrderTypeMarketWithProtection 	= 0x80000,
		OrderTypeMarketOnOpen 		= 0x100000,
        OrderTypeLimitOnOpen 		= 0x200000,
        OrderTypePeggedToPrimary 	= 0x400000
    } OrderTypes;

    typedef [uuid(b89b351b-596e-42db-b3aa-9c244b5df140), version(1.0)]
    enum {
        RtCapMarketDepthByPrice = 1,
        RtCapMarketDepthByPosition = 2
    } RealtimeDataServiceProviderCapabilities;

    //typedef [uuid(B2552E20-11F4-486E-A351-2B1212F90982), version(1.0)]
    //enum {
    //    SecTypeStock = 1,
    //    SecTypeFuture = 2,
    //    SecTypeOption = 3,
    //    SecTypeFuturesOption = 4,
    //    SecTypeCash = 5,
    //    SecTypeBag = 6,
    //    SecTypeIndex = 7
    //} SecurityTypes;

    typedef [uuid(6fa60c65-34bb-4602-863f-210003444d85), 
	version(1.0)]
    enum {
		Tickfile = 1,
		RealtimeData = 2,
		ExchangeSimulator = 4,
		LiveOrderSubmission = 8,
		HistoricalData = 0x10,
		OrderPersistence = 0x20,
		ContractInfo = 0x40,
		Strategies = 0x80,
		MarketScanner = 0x100,
		News = 0x200,
		Account = 0x400
    } ServiceProviderTypes;

	typedef [uuid(02e561db-66bd-4696-90a9-e2a04568cff8), version(1.0)]
	enum {
		SVCurrentSessionStartTime = 0,
		SVCurrentSessionEndTime = 1,
		SVHighPrice = 2,
		SVLowPrice = 3,
		SVPreviousClosePrice = 4
	} SpecialValues;

    typedef [uuid(4FA2EF4F-D6B1-4201-965C-9E0550F0960F), version(1.0)]
    enum {
		Log = 1,
		Trace = 2,
		Debug = 3
    } StandardListenValueTypes;

    typedef [uuid(d8fee7c0-401e-454e-910a-1d16a3a75685), 
	version(1.0)]
    enum {

		[helpstring("Tickfile is empty")]
    	TFTickfileEmpty = 2000,		

		[helpstring("Tickfile structure doesn't correspond to format id")]
    	TFTickfileInvalid = 2001,	

		[helpstring("The version of tickfile is not supported")]
    	TFTickfileVersionNotSupported = 2002,
                            		
		[helpstring("The tickfile contains invalid contract details")]
    	TFContractDetailsInvalid = 2003,	

		[helpstring("The tickfile contains no contract details")]
    	TFNoContractDetails = 2004,	

		[helpstring("The specified tickfile does not exist")]
    	TFTickfileDoesntExist = 2005,

		[helpstring("Unable to connect to the tickfile's data source")]
    	TFCantConnectDataSource = 2006,

		[helpstring("The tickfile's data source is no longer responding or sending data")]
    	TFDataSourceNotResponding = 2007,

		[helpstring("Trying again to connect to the tickfile's data source")]
    	TFRetryConnectDataSource = 2008,

		[helpstring("The contract specifier in the tickfile specifier does not refer to a valid contract")]
    	TFContractSpecifierInvalid = 2009,

		[helpstring("Trying to reconnect to the tickfile's data source")]
    	TFReConnectingDataSource = 2010,

		[helpstring("Lost connection to the tickfile's data source")]
    	TFLostConnectionToDataSource = 2011,

		[helpstring("Connected to the tickfile's data source")]
    	TFConnectedToDataSource = 2012,

		[helpstring("Unable to connect to the contract data source")]
    	CICantConnectDataSource = 2100,

		[helpstring("Trying again to connect to the contract data source")]
    	CIRetryConnectDataSource = 2101,

		[helpstring("The contract specifier does not refer to a valid contract")]
    	CIContractSpecifierInvalid = 2102,

		[helpstring("Trying to reconnect to the contract data source")]
		CIReConnectingDataSource = 2103,
		
		[helpstring("Lost connection to the contract data source")]
    	CILostConnectionToDataSource = 2104,

		[helpstring("Disconnected from the contract data source")]
    	CIDisconnectedFromDataSource = 2105,

		[helpstring("Connected to the contract data source")]
    	CIConnectedToDataSource = 2106,

		[helpstring("Unable to connect to the historical data source")]
    	HDCantConnectDataSource = 2200,

		[helpstring("Trying again to connect to the historical data source")]
    	HDRetryConnectDataSource = 2201,

		[helpstring("Lost connection to the historical data source")]
    	HDLostConnectionToDataSource = 2202,

		[helpstring("Trying to reconnect to the historical data source")]
    	HDReConnectingDataSource = 2203,

		[helpstring("Historical data request is invalid")]
    	HDRequestInvalid = 2204,

		[helpstring("Disconnected from the historical data source")]
    	HDDisconnectedFromDataSource = 2205,

		[helpstring("Historical data request was not successful")]
    	HDRequestFailed = 2205,

		[helpstring("Connected to the historical data source")]
    	HDConnectedToDataSource = 2206,

		[helpstring("Unable to connect to the realtime data source")]
    	RTCantConnectDataSource = 2300,

		[helpstring("Trying again to connect to the realtime data source")]
    	RTRetryConnectDataSource = 2301,

		[helpstring("Lost connection to the realtime data source")]
    	RTLostConnectionToDataSource = 2302,

		[helpstring("Trying to reconnect to the realtime data source")]
    	RTReConnectingDataSource = 2303,

		[helpstring("Realtime data request is invalid")]
    	RTRequestInvalid = 2304,

		[helpstring("Realtime data request was not successful")]
    	RTRequestFailed = 2305,

		[helpstring("Realtime market depth request was not successful")]
   		RTMarketDepthRequestFailed = 2306,

		[helpstring("Disconnected from the realtime data source")]
    	RTDisconnectedFromDataSource = 2307,

		[helpstring("The realtime data source is no longer responding or sending data")]
    	RTDataSourceNotResponding = 2308,

		[helpstring("Connected to the realtime data source")]
    	RTConnectedToDataSource = 2309,

		[helpstring("Unable to connect to the broker")]
    	LOCantConnectToBroker = 2400,

		[helpstring("Trying again to connect to the broker")]
    	LORetryConnectToBroker = 2401,

		[helpstring("Lost connection to the broker")]
    	LOLostConnectionToBroker = 2402,

		[helpstring("Trying to reconnect to the broker")]
    	LOReConnectingToBroker = 2403,

		[helpstring("Unknown contract")]
    	LOUnknownContract = 2404,

		[helpstring("Invalid order")]
    	LOInvalidOrder = 2405,

		[helpstring("Not unique contract")]
    	LONotUniqueContract = 2406,

		[helpstring("Insufficient funds")]
    	LOInsufficientFunds = 2407,

		[helpstring("Disconnected from the broker")]
    	LODisconnectedFromBroker = 2408,

		[helpstring("Connected to the broker")]
    	LOConnectedToBroker = 2409

   } StandardSPEventCodes;

    typedef [uuid(777ae18f-8de7-40fd-95d4-003f88c7f381), 
	version(1.0)]
    enum {
        StopTriggerDefault = 1,
        StopTriggerDoubleBidAsk = 2,
		StopTriggerLast = 4,
		StopTriggerDoubleLast = 8
    } StopTriggerMethods;

    typedef [uuid(b1aef3b7-a908-448e-a827-4ab8454f67b4), 
	version(1.0)]
    enum {
        ReasonNone = 0,
        ReasonAsk = 1,
		ReasonBid = 2,
		ReasonTrade = 3,
		ReasonVolume = 4,
		ReasonClockTick = 5, 
		ReasonSessionStart = 10,
		ReasonSessionEnd = 11
    } StrategyInvokeReasons;

    typedef [uuid(8139f349-68b8-4e48-bf72-2dc4cdaeb8a8), 
	version(1.0)]
    enum {
        FileBased = 1,
        StreamBased = 2
    } TickfileFormatTypes;

    typedef [uuid(810E7E7B-C092-48CB-B5B1-B48443DD8D08), version(1.0)]
    enum {
        Record = 1,
        RecordMarketDepth = 2,
        Replay = 4,
        PositionExact = 8,
        ReplayMarketDepth = 16,
	ReportReplayProgress = 32,
	SaveContractInformation = 64
    } TickfileServiceProviderCapabilities;

    typedef [uuid(0EB43BAD-8A73-4B1E-B9A3-B87E89583CC9), 
	version(1.0)]
    enum {
        TickfileNotPlaying = 0,
        TickfilePlaying = 1,
        TickfilePaused = 2
    } TickfileStateCodes;

// Types*************************************************************   

    typedef [uuid(b62bc45a-ca8b-41e3-9d9a-99a4c473d55a), version(1.0)]
    struct tagBar {
		DATE Timestamp;
		//BarTypes BarType;
		//long PeriodMinutes;
		double OpenPrice;
		double HighPrice;
		double LowPrice;
		double ClosePrice;
		long Volume;
		long TickVolume;
		long OpenInterest;
    } Bar;

    typedef [uuid(eb2da908-cd7f-43a5-aa44-9e22e131ae9a), version(1.0)]
    struct tagDictionaryEntry {
        BSTR Key;
		BSTR Value;
    } DictionaryEntry;

    typedef [uuid(c7fb9add-a3d6-48e4-b4e4-b5bf2b2168b2), version(1.0)]
    struct tagServiceProviderDetails {
        BSTR Comments;
		BSTR Vendor;
		BSTR EXEName;
		BSTR FileDescription;
		BSTR LegalCopyright;
		BSTR LegalTrademarks;
		long VersionMajor;
		long VersionMinor;
		long VersionRevision;
		long Path;
		long ProductName;
    } ServiceProviderDetails;

    typedef [uuid(50e309ce-2461-45bd-b9be-8ae0312905b9), version(1.0)]
    struct tagTickfileFormatSpecifier {

        [helpstring("Indicates the type of tickfile format")]
		TickfileFormatTypes FormatType;

        [helpstring("Bitmask of TickfileServiceProviderCapabilities values indicating the capabilities supported by this tickfile format")]
		long Capabilities;

        [helpstring("The unique id identifying this tickfile format")]
        BSTR FormalID;

        [helpstring("The informal (human readable but not necessarily unique) name for this tickfile format")]
        BSTR Name;

		[helpstring("For file-based tickfile formats, this is the filename extension used to identify tickfiles in this format")]
		BSTR FileExtension;
    } TickfileFormatSpecifier;

// Interfaces *************************************************************************

    [
      uuid(792b8ea3-3e91-4461-9f6e-ed28d34ebfc7),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Service Providers that supply market data consolidated into bars")
    ]
    interface IBarDataConsumer : IUnknown {

		// Methods =====================================================

        HRESULT Bar(
            [in] Bar* data,
			[in] long barLength,
			[in] TimePeriodUnits barUnit);

    };

    [
      uuid(b28ed913-546d-42fb-a495-f0aa0b1ded1f),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Bar Data Readers")
    ]
    interface IBarDataInputServiceConsumer : IUnknown {

		// Methods =====================================================

		HResult NotifyEvent(
			[in] StandardSPEventCodes eventCode,
			[in] BSTR eventMessage,
			[in] long serviceProviderHandle);

		HRESULT Ready();

        HRESULT BarDataComplete();

        HRESULT Progress(
			[in] long barsRetrieved,
			[in] float percentComplete);

    };

    [
      uuid(e8639452-d193-4201-8f31-d4329cb3497c),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Bar Data Writers")
    ]
    interface IBarDataOutputServiceConsumer : IUnknown {

		// Properties ==================================================


		// Methods =====================================================

		HResult NotifyEvent(
			[in] StandardSPEventCodes eventCode,
			[in] BSTR eventMessage,
			[in] long serviceProviderHandle);

        HRESULT NotReady();

        HRESULT OutputBarfileCreated(
            [in] BSTR filename);

        HRESULT Ready();

		HRESULT RequiredTimePeriod(
			[in] TimePeriod* timeframe,
			[in] long saveIntervalSeconds);

    };

    [
      uuid(43e4982a-b79c-4b64-a3ce-3d241fcb944a),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Bar Data Readers")
    ]
    interface IBarDataReader : IUnknown {

		// Properties ==================================================

        [propget]
        HRESULT BarDataSpecifier(
            [out, retval] IBarDataSpecifier** );

		[propget]
		HRESULT NumberOfBars(
			[out,retval] long* );

		// Methods =====================================================

		HRESULT CancelFetch();

		HRESULT FetchBars(
				[in] IBarDataSpecifier* barSpecifier);

		HRESULT ReleaseDataStore();

		HRESULT FireNextBar();

        HRESULT Supports(
                        [in] long capabilities, 
                        [out, retval] VARIANT_BOOL* );
    };

    [
      uuid(6ed71d32-5b6d-4048-acd7-d49080fcd6e4),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Bar Data Service Providers")
    ]
    interface IBarDataServiceProvider : IUnknown {

		// Properties ==================================================

        [propget]
		HRESULT SupportedTimePeriods(
            [out, retval] SAFEARRAY(TimePeriod)* );

		// Methods =====================================================

        HRESULT CreateBarDataReader(
			[in] IBarDataConsumer* dataConsumer,
			[in] IBarDataInputServiceConsumer* serviceConsumer,
			[out, retval] IBarDataReader** );

        HRESULT CreateBarDataWriter(
			[in] IBarDataOutputServiceConsumer* serviceConsumer,
			[in] ContractSpecifier* contractSpec,
            [in, optional, defaultvalue("")] BSTR location, 
            [out, retval] IBarDataWriter** );

		HRESULT IsSupportedTimePeriod(
            [in] TimePeriod* period, 
            [out, retval] VARIANT_BOOL* );

        HRESULT Supports(
            [in] long capabilities, 
            [out, retval] VARIANT_BOOL* );

    };

    [
      uuid(71d4591a-1c32-4616-81e0-65115c474aa2),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Bar Data Specifier object")
    ]
    interface IBarDataSpecifier : IUnknown {

		// Properties ==================================================

		[propput,
		helpstring("Contains the contract for the required data")]
		HRESULT Contract([in] Contract*) ;

		[propget,
		helpstring("Contains the contract for the required data")]
		HRESULT Contract([out, retval] Contract**) ;

		[propput,
		helpstring("Contains the bar length for the required data")]
		HRESULT BarLength([in] long) ;

		[propget,
		helpstring("Contains the bar length for the required data")]
		HRESULT BarLength([out, retval] long*) ;

        [propput,
	    helpstring("Contains the time units for the bar length")]
		HRESULT BarLengthUnits([in] TimePeriodUnits) ;

        [propget,
	    helpstring("Contains the time units for the bar length")]
		HRESULT BarLengthUnits([out, retval] TimePeriodUnits*) ;

		[propput,
	    helpstring("Specifies the type of bar data required")]
		HRESULT Bartype([in] BarTypes) ;

		[propget,
	    helpstring("Specifies the type of bar data required")]
		HRESULT Bartype([out, retval] BarTypes*) ;

        [propput,
	    helpstring("Specifies the start date and time for the data")]
        HRESULT FromDate([in] DATE) ;

        [propget,
	    helpstring("Specifies the start date and time for the data")]
        HRESULT FromDate([out, retval] DATE*) ;

        [propput,
	    helpstring("Specifies the end date and time for the data")]
        HRESULT ToDate([in] DATE) ;

        [propget,
	    helpstring("Specifies the end date and time for the data")]
        HRESULT ToDate([out, retval] DATE*) ;

		[propput,
	    helpstring("Specifies the maximum number of bars to be returned")]
		HRESULT NumberOfBars([in] long) ;

		[propget,
	    helpstring("Specifies the maximum number of bars to be returned")]
		HRESULT NumberOfBars([out, retval] long*) ;

		[propput,
	    helpstring("Indicates that bars starting outside the session times declared in the relevant contract object are to be included")]
		HRESULT includeBarsOutsideSession([in] VARIANT_BOOL) ;

		[propget,
	    helpstring("Indicates that bars starting outside the session times declared in the relevant contract object are to be included")]
		HRESULT includeBarsOutsideSession([out, retval] VARIANT_BOOL*) ;

	};

    [
      uuid(4c1da235-2896-45c4-b5d5-f9e87c904056),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Writers")
    ]
    interface IBarDataWriter : IUnknown {

		// Properties ==================================================

        [propget]
        HRESULT ContractSpecifier([out, retval] ContractSpecifier** );

		// Methods =====================================================

		HRESULT ReleaseDataStore();

        HRESULT WriteBar(
			[in] Bar* data,
			[in] BarTypes barType,
			[in] long barLength,
			[in] TimePeriodUnits barUnit);

    };

 //   [
 //     uuid(FCD8A452-31DD-4131-9E2B-1807F9522921),
 //     version(1.0),
 //     nonextensible,
 //     helpstring("An object that holds specification information relating to a compound contract")
 //   ]
 //   interface IComboLeg : IUnknown {

	//// Properties ==================================================

 //       [propget]
 //       HRESULT Action([out, retval] OrderActions* );

 //       [propput]
 //       HRESULT Action([in] OrderActions );

 //       [propget]
 //       HRESULT ContractID([out, retval] long* );

 //       [propput]
 //       HRESULT ContractID([in] long );

 //       [propget]
 //       HRESULT Exchange([out, retval] BSTR* );

 //       [propput]
 //       HRESULT Exchange([in] BSTR );

 //       [propput]
 //       HRESULT OpenClose([in] LegOpenClose );

 //       [propget]
 //       HRESULT OpenClose([out, retval] LegOpenClose* );

 //       [propget]
 //       HRESULT Ratio([out, retval] long* );

 //       [propput]
 //       HRESULT Ratio([in] long );

	//	// Methods =====================================================

 //       HRESULT Clone([out, retval] IComboLeg** );

 //       HRESULT ToString([out, retval] BSTR* );
 //   };

  //  [
  //    uuid(C157B09E-693D-415E-9818-641AB96F919F),
  //    version(1.0),
  //    nonextensible,
  //    helpstring("Defines a collection of IComboLeg objects")
  //  ]
  //  interface IComboLegs : IUnknown {

		//// Properties ==================================================

  //      [propget]
  //      HRESULT Count([out, retval] long* );

		//// Methods =====================================================

		//HRESULT Add(
		//	[in] IComboLeg* comboLeg,
		//	[in, optional, defaultvalue("")] BSTR key); 

  //      HRESULT Clone([out, retval] IComboLegs** );

  //      HRESULT Item(
  //          [in] VARIANT index, 
  //          [out, retval] IComboLeg** );

  //      HRESULT NewComboLeg(
		//	[out, retval] IcomboLeg**);

  //      HRESULT Remove(
		//	[in] VARIANT index);

  //  };

    [
      uuid(0d39f668-74e4-4eff-93ee-a10ebc859a0a),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild for common functions to be called by any Service Provider")
    ]
    interface ICommonServiceConsumer : IUnknown {

	// Methods =====================================================

		HRESULT FatalServiceProviderError(
			[in] long errorCode,
			[in] BSTR source,
			[in] BSTR errorMessage,
			[in] long serviceProviderHandle);

		HRESULT NotifyListeners(
			[in] VARIANT value,
			[in] long valueType,
			[in] IDispatch* source);

		HRESULT RegisterServiceProvider(
			[in] long handle,
			[in] ServiceProviderTypes spType);

		HRESULT ServiceProviderError(
			[in] long errorCode,
			[in] BSTR errorMessage,
			[in] long serviceProviderHandle);

    };

    [
      uuid(967fccaa-3d6c-4e82-82ad-b0be3b6e47cb),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by all Service Providers")
    ]
    interface ICommonServiceProvider : IUnknown {

	// Properties ==================================================

		[propput]
		HRESULT Name([in] BSTR );

		[propget]
		HRESULT Name([out, retval] BSTR* );

		[propget]
		HRESULT Details([out, retval] ServiceProviderDetails* );

		[propput]
		HRESULT LogLevel([in] LogLevels );

	// Methods =====================================================

        HRESULT Link(
			[in] ICommonServiceConsumer* commonServiceConsumer,
			[in] long handle,
			[in] Parameters* params);

		HRESULT Terminate();

    };

 //   [
 //     uuid(bc732d2c-7256-4117-bc75-12885ebd560c),
 //     version(1.0),
 //     nonextensible,
 //     helpstring("Defines the interface for passing contract details")
 //   ]
 //   interface IContract : IUnknown {

	//// Properties ==================================================

 //       [propget]
 //       HRESULT ContractID([out, retval] long* );

 //       [propput]
 //       HRESULT ContractID([in] long );

 //       [propget]
 //       HRESULT DaysBeforeExpiryToSwitch([out, retval] long* );

 //       [propput]
 //       HRESULT DaysBeforeExpiryToSwitch([in] long );

 //       [propget]
 //       HRESULT Description([out, retval] BSTR* );

 //       [propput]
 //       HRESULT Description([in] BSTR );

 //       [propget]
 //       HRESULT ExpiryDate([out, retval] DATE* );

 //       [propput]
 //       HRESULT ExpiryDate([in] DATE );

 //       [propget]
 //       HRESULT Key([out, retval] BSTR* );

 //       [propget]
 //       HRESULT MarketName([out, retval] BSTR* );

 //       [propput]
 //       HRESULT MarketName([in] BSTR );

 //       [propget]
 //       HRESULT MinimumTick([out, retval] double* );

 //       [propput]
 //       HRESULT MinimumTick([in] double );

 //       [propget]
 //       HRESULT Multiplier([out, retval] long* );

 //       [propput]
 //       HRESULT Multiplier([in] long );

 //       [propget]
 //       HRESULT NumberOfDecimals([out, retval] long* );

 //       [propget]
 //       HRESULT ProviderID(
	//		[in] BSTR providerKey,
	//		[out, retval] BSTR* );

 //       [propput]
 //       HRESULT ProviderIDs([in] SAFEARRAY(DictionaryEntry)* );

 //       [propget]
 //       HRESULT SessionEndTime([out, retval] DATE* );

 //       [propput]
 //       HRESULT SessionEndTime([in] DATE );

 //       [propget]
 //       HRESULT SessionStartTime([out, retval] DATE* );

 //       [propput]
 //       HRESULT SessionStartTime([in] DATE );

 //       [propget]
 //       HRESULT Specifier([out, retval] IContractSpecifier** );

 //       [propput]
 //       HRESULT Specifier([in] IContractSpecifier* );

 //       [propget]
 //       HRESULT TradingClass([out, retval] BSTR* );

 //       [propput]
 //       HRESULT TradingClass([in] BSTR );

 //       [propget]
 //       HRESULT ValidExchanges([out, retval] SAFEARRAY(BSTR)* );

 //       [propput]
 //       HRESULT ValidExchanges([in, out] SAFEARRAY(BSTR)* );

	//// Methods =====================================================

 //       HRESULT Clone([out, retval] IContract** );

 //       HRESULT FromXML([in] BSTR contractXML);

 //       HRESULT ToString([out, retval] BSTR* );

 //       HRESULT ToXML([out, retval] BSTR* );
 //   };

    [
      uuid(8afff4c8-1c22-4b52-9d13-48f4a3b86655),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be provided by TradeBuild to Contract Info Service Providers")
    ]
    interface IContractInfoServiceConsumer : IUnknown {

		// Properties ==================================================


		// Methods =====================================================

		HResult NotifyEvent(
			[in] StandardSPEventCodes eventCode,
			[in] BSTR eventMessage,
            [in] ContractsBuilder* pContractsBuilder,
			[in] long serviceProviderHandle);

		HRESULT LoadComplete(
			[in] long handle,
            [in] ContractsBuilder* pContractsBuilder);

    };

    [
      uuid(657ab51f-eec5-42b4-b71b-7001ecae3d24),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Contract Info Service Providers")
    ]
    interface IContractInfoServiceProvider : IUnknown {

		// Properties ==================================================

        [propput]
        HRESULT ContractInfoServiceConsumer([in] IContractInfoServiceConsumer* rhs);

		// Methods =====================================================

        HRESULT RequestContractDetails(
                        [in] ContractsBuilder* pContractsBuilder);

		HRESULT StoreContractDetails(
			[in] Contract* pContract);

        HRESULT Supports(
                        [in] long capabilities, 
                        [out, retval] VARIANT_BOOL* );

    };

 //   [
 //     uuid(097ab811-caf4-4b83-a7d5-20d5d177bee7),
 //     version(1.0),
 //     nonextensible,
 //     helpstring("A collection of IContract objects")
 //   ]
 //   interface IContracts : IUnknown {

	//	// Properties ==================================================


	//	[propput]
	//	HRESULT ContractSpecifier([in] IContractSpecifier*);

	//	[propget]
	//	HResult ContractSpecifier([out, retval] IContractSpecifier**);

	//	[propget]
	//	HRESULT Count([out, retval] long*);

	//// Methods =====================================================

	//	HRESULT AddContract(
	//		[in] IContract* pContract );
	//
	//	HRESULT Item(
	//		[in] VARIANT index,
	//		[out, retval] IContract**);

	//	HRESULT Remove([in] VARIANT index);

	//	HRESULT ServiceProviderCantHandle(
	//		[in] BSTR reason,
	//		[in] BSTR serviceProviderName);

 //   };

 //   [
 //     uuid(D09D30E9-D3EF-4790-AE0D-EEA07BD8645D),
 //     version(1.0),
 //     nonextensible,
 //     helpstring("Defines the interface for passing contract specifications")
 //   ]
 //   interface IContractSpecifier : IUnknown {

	//// Properties ==================================================

 //       [propput]
 //       HRESULT ComboLegs([in] IComboLegs* );

 //       [propget]
 //       HRESULT ComboLegs([out, retval] IComboLegs** );

 //       [propput]
 //       HRESULT CurrencyCode([in] BSTR );

 //       [propget]
 //       HRESULT CurrencyCode([out, retval] BSTR* );

 //       [propput]
 //       HRESULT Exchange([in] BSTR );

 //       [propget]
 //       HRESULT Exchange([out, retval] BSTR* );

 //       [propput]
 //       HRESULT Expiry([in] BSTR );

 //       [propget]
 //       HRESULT Expiry([out, retval] BSTR* );

 //       [propget]
 //       HRESULT Key([out, retval] BSTR* );

 //       [propput]
 //       HRESULT LocalSymbol([in] BSTR );

 //       [propget]
 //       HRESULT LocalSymbol([out, retval] BSTR* );

 //       [propput]
 //       HRESULT Locked([in] VARIANT_BOOL );

 //       [propget]
 //       HRESULT Locked([out, retval] VARIANT_BOOL* );

 //       [propput]
 //       HRESULT Right([in] OptionRights );

 //       [propget]
 //       HRESULT Right([out, retval] OptionRights* );

 //       [propput]
 //       HRESULT SecType([in] SecurityTypes );

 //       [propget]
 //       HRESULT SecType([out, retval] SecurityTypes* );

 //       [propput]
 //       HRESULT Strike([in] double );

 //       [propget]
 //       HRESULT Strike([out, retval] double* );

 //       [propput]
 //       HRESULT Symbol([in] BSTR );

 //       [propget]
 //       HRESULT Symbol([out, retval] BSTR* );

	//// Methods =====================================================

 //       HRESULT Clone([out, retval] IContractSpecifier** );

 //       HRESULT Equals(
 //                       [in] IContractSpecifier* pContractSpecifier, 
 //                       [out, retval] VARIANT_BOOL* );

 //       HRESULT FuzzyEquals(
 //                       [in] IContractSpecifier* pContractSpecifier, 
 //                       [out, retval] VARIANT_BOOL* );

 //       HRESULT ToString([out, retval] BSTR* );
 //   };

 //   [
 //     uuid(e8c72f3e-a0a4-4fbc-abf9-062adde15fc0),
 //     version(1.0),
 //     nonextensible,
 //     helpstring("Defines the interface to be implemented by Execution classes")
 //   ]
 //   interface IExecution : IUnknown {

	//// Properties ==================================================

	//[propput]
	//HRESULT accountIdentifier([in] BSTR );

	//[propget]
	//HRESULT accountIdentifier([out, retval] BSTR* );

	//[propput]
	//HRESULT action([in] OrderActions );

	//[propget]
	//HRESULT action([out, retval] OrderActions* );

	//[propput]
	//HRESULT contractSpecifier([in] IContractSpecifier* );

	//[propget]
	//HRESULT contractSpecifier([out, retval] IContractSpecifier** );

	//[propput]
	//HRESULT execId([in] BSTR );

	//[propget]
	//HRESULT execId([out, retval] BSTR* );

	//[propput]
	//HRESULT fillingExchange([in] BSTR );

	//[propget]
	//HRESULT fillingExchange([out, retval] BSTR* );

	//[propput]
	//HRESULT isLiquidation([in] VARIANT_BOOL );

	//[propget]
	//HRESULT isLiquidation([out, retval] VARIANT_BOOL* );

	//[propput]
	//HRESULT orderBrokerId([in] BSTR );

	//[propget]
	//HRESULT orderBrokerId([out, retval] BSTR* );

	//[propput]
	//HRESULT orderTradeBuildId([in] BSTR );

	//[propget]
	//HRESULT orderTradeBuildId([out, retval] BSTR* );

	//[propput]
	//HRESULT price([in] double );

	//[propget]
	//HRESULT price([out, retval] double* );

	//[propput]
	//HRESULT quantity([in] long );

	//[propget]
	//HRESULT quantity([out, retval] long* );

	//[propput]
	//HRESULT time([in] DATE );

	//[propget]
	//HRESULT time([out, retval] DATE* );

	//};

	[
      uuid(a0f1ab28-facb-4c2c-ad04-0cc504cbcca2),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Order classes")
    ]
    interface IOrder : IUnknown {

	// Properties ==================================================

        [propget]
        HRESULT action([out, retval] OrderActions* );

        [propget]
        HRESULT allOrNone([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT blockOrder([out, retval] VARIANT_BOOL* );

        [propput]
        HRESULT brokerId([in] BSTR );

        [propget]
        HRESULT brokerId([out, retval] BSTR* );

        [propget]
        HRESULT Contract([out, retval] Contract** );

        [propget]
        HRESULT displaySize([out, retval] long* );

        [propget]
        HRESULT discretionaryAmount([out, retval] double* );

        [propget]
        HRESULT eTradeOnly([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT firmQuoteOnly([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT goodAfterTime([out, retval] DATE* );

        [propget]
        HRESULT goodAfterTimeTZ([out, retval] BSTR* );

        [propget]
        HRESULT goodTillDate([out, retval] DATE* );

        [propget]
        HRESULT goodTillDateTZ([out, retval] BSTR* );

        [propget]
        HRESULT hidden([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT ignoreRegularTradingHours([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT limitPrice([out, retval] double* );

        [propget]
        HRESULT minimumQuantity([out, retval] long* );

        [propget]
        HRESULT NbboPriceCap([out, retval] double* );

        [propget]
        HRESULT originatorRef([out, retval] BSTR* );

        [propget]
        HRESULT orderType([out, retval] OrderTypes* );

        [propget]
        HRESULT origin([out, retval] OrderOrigins* );

        [propget]
        HRESULT overrideConstraints([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT quantity([out, retval] long* );

        [propget]
        HRESULT quantityFilled([out, retval] long* );

        [propget]
        HRESULT quantityRemaining([out, retval] long* );

        [propget]
        HRESULT regularTradingHoursOnly([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT settlingFirm([out, retval] BSTR* );

        [propget]
        HRESULT status([out, retval] OrderStatuses* );

	[propget]
        HRESULT stopTriggerMethod([out, retval] StopTriggerMethods* );

        [propget]
        HRESULT sweepToFill([out, retval] VARIANT_BOOL* );

        [propget]
        HRESULT timeInForce([out, retval] OrderTifs* );

        [propget]
        HRESULT tradeBuildId([out, retval] BSTR* );

        [propget]
        HRESULT triggerPrice([out, retval] double* );

	// Methods =====================================================

//        HRESULT clone([out, retval] _Order** );
    };

    [
      uuid(049129f6-ba7c-4373-a92d-580ac0714ba0),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface of the Order Plex object")
    ]
interface IOrderPlex : IDispatch {

	// Properties ==================================================

	[propget]
	HRESULT closeoutOrder([out, retval] IOrder** );

	[propget]
	HRESULT entryOrder([out, retval] IOrder** );

	[propget]
	HRESULT key([out, retval] BSTR* );

	[propget]
	HRESULT Order(
		[in] long index, 
		[out, retval] IOrder** );

	[propget]
	HRESULT numberOfOrders([out, retval] long* );

	[propget]
	HRESULT stoporder([out, retval] IOrder** );

	[propget]
	HRESULT targetOrder([out, retval] IOrder** );

    };

    [
      uuid(19cc1663-8606-49c7-ba8b-9ecdce6dedc0),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Order Submission Service Consumers")
    ]
    interface IOrderSubmissionSrvcConsumer : IUnknown {

	// Methods =====================================================

	HRESULT cancelTickData([in] IStreamingDataConsumer* consumer);

	HResult NotifyEvent(
			[in] StandardSPEventCodes eventCode,
			[in] BSTR eventMessage,
			[in] long serviceProviderHandle);

	HRESULT executionDetails(
		[in] ContractSpecifier* pContractSpecifier, 
		[in] BSTR accountIdentifier,
		[in] OrderActions action,
		[in] BSTR execId,
		[in] BSTR fillingExchange,
		[in] VARIANT_BOOL isLiquidation,
		[in] BSTR orderBrokerId,
		[in] BSTR orderTradeBuildId,
		[in] double price,
		[in] long quantity,
		[in] DATE fillTime);

	HRESULT notReady();

	HRESULT orderStatus(
		[in] BSTR orderId, 
		[in] OrderStatuses status);

	HRESULT preFill(
		[in] BSTR orderId, 
		[in, out] double* fillPrice, 
		[in, out] long* fillSize);

	HRESULT ready();

	HRESULT rejectOrder(
		[in] BSTR orderId, 
		[in] BSTR reason);

	HRESULT requestTickData(
		[in] IStreamingDataConsumer* consumer, 
		[in] VARIANT_BOOL includeMarketDepth);

	};

    [
      uuid(5dc8a1fd-a579-40b8-ae1c-8203bc9d75c8),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Order Submission Service Providers")
    ]
    interface IOrderSubmissionSrvcProvider : IUnknown {

	// Methods =====================================================

	HRESULT CreateOrderSubmitter(
		[in] IOrderSubmissionSrvcConsumer* serviceConsumer, 
		[in] Contract* pContract, 
		[out, retval] IOrderSubmitter** );
    };

    [
      uuid(bc237c88-18c2-4594-8558-686c5a36ee63),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Order Submitters")
    ]
    interface IOrderSubmitter : IUnknown {

	// Properties ==================================================

	[propput]
	HRESULT clockRate([in] float);

	[propget]
	HRESULT permittedOrderAttributes([out, retval] long* );

	[propget]
	HRESULT permittedOrderTifs([out, retval] long* );

	[propget]
	HRESULT permittedOrderTypes([out, retval] long* );

	[propget]
	HRESULT permittedStopTriggerMethods([out, retval] long* );

	// Methods =====================================================

	HRESULT cancelOrderPlex(
		[in] IOrderPlex* pOrderPlex, 
		[out, retval] VARIANT_BOOL* );

	HRESULT cancelStopOrder([in] IOrderPlex* pOrderPlex);

	HRESULT cancelTargetOrder([in] IOrderPlex* pOrderPlex);

	HRESULT executeOrderPlex([in] IOrderPlex* pOrderPlex);

	HRESULT modifyOrderPlex(
		[in] IOrderPlex* pOrderPlex, 
		[in] VARIANT_BOOL entryOrderChanged, 
		[in] VARIANT_BOOL stopOrderChanged, 
		[in] VARIANT_BOOL targetOrderChanged, 
		[in] VARIANT_BOOL closeoutOrderChanged);

	HRESULT finish();

	HRESULT resubmitStopAndTargetOrders([in] IOrderPlex* pOrderPlex);

	HRESULT resubmitStopOrder([in] IOrderPlex* pOrderPlex);

	HRESULT resubmitTargetOrder([in] IOrderPlex* pOrderPlex);
};

 //   [
 //     uuid(96352d8b-e6d3-44de-9c61-3329de6c0c91),
 //     version(1.0),
 //     nonextensible,
 //     helpstring("Defines the interface for parameter objects")
 //   ]
 //   interface IParameter : IUnknown {

	//// Properties ==================================================

	//[propput]
	//HRESULT name([in] BSTR );

	//[propget]
	//HRESULT name([out, retval] BSTR* );

	//[propput]
	//HRESULT value([in] BSTR );

	//[propget]
	//HRESULT value([out, retval] BSTR* );

 //   };

 //   [
 //     uuid(6531cddc-92d8-497e-a68a-4561cfd97c7a),
 //     version(1.0),
 //     nonextensible,
 //     helpstring("This interface provides means for manipulating collections of parameter objects")
 //   ]
 //   interface IParameters : IUnknown {

	//// Properties ==================================================

	//[propget]
	//HRESULT count([out, retval] long* );

	//[propget]
	//HRESULT isDirty([out, retval] VARIANT_BOOL* );

	//// Methods =====================================================

	//HRESULT addParameter([in] IParameter* param);

	//HRESULT clone(
	//		[out, retval] IParameters** );

	//HRESULT equals(
	//		[in, out] IParameters** params, 
	//		[out, retval] VARIANT_BOOL* );

	//HRESULT getFirstParameter(
	//		[out, retval] IParameter** );

	//HRESULT getNextParameter(
	//		[out, retval] IParameter** );

	//HRESULT getParameterValue(
	//		[in] BSTR name, 
	//		[in, optional] BSTR defaultValue, 
	//		[out, retval] BSTR* );


	//HRESULT setParameterValue(
	//		[in] BSTR name, 
	//		[in] BSTR value, 
	//		[out, retval] IParameter** );

	//HRESULT sortByName();

 //   };

    [
      uuid(4f690d6e-0742-46c0-9c2d-379c2a827aa4),
      version(1.0),
      nonextensible,
      helpstring("Provides the control interface into TradeBuild to be called by Realtime Data Readers")
    ]
    interface IRealtimeDataInputServiceConsumer : IUnknown {

	// Methods =====================================================

	HResult NotifyEvent(
			[in] StandardSPEventCodes eventCode,
			[in] BSTR eventMessage,
			[in] long serviceProviderHandle);

    };


    [
      uuid(de66f953-6909-42b8-aba3-157c5980fff4),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Realtime Data Readers")
    ]
    interface IRealtimeDataReader : IUnknown {

		// Methods =====================================================

		HRESULT StartData(
						[in] Contract* contract, 
			[in] DOMEventTypes DomEventsRequired);

		HRESULT StartMarketDepth(
			[in] DOMEventTypes DomEventsRequired);

		HRESULT StopData();

		HRESULT StopMarketDepth();

		HRESULT Supports(
						[in] long capabilities, 
						[out, retval] VARIANT_BOOL* );

    };


    [
      uuid(3d543626-71e7-4246-824f-4d0b84c2206f),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by Realtime Data Service Providers")
    ]
    interface IRealtimeDataServiceProvider : IUnknown {

		// Methods =====================================================

        HRESULT CreateRealtimeDataReader(
			[in] IStreamingDataConsumer* dataConsumer,
			[in] IRealtimeDataInputServiceConsumer* serviceConsumer,
			[out, retval] IRealtimeDataReader** );

        HRESULT Supports(
                        [in] long capabilities, 
                        [out, retval] VARIANT_BOOL* );

    };

  //  [
  //    uuid(a9673da8-0be1-4b39-8356-1848f74e3d66),
  //    version(1.0),
  //    nonextensible,
  //    helpstring("Specifies the interface to be implemented by Strategy objects")
  //  ]
  //  interface ISimpleStrategy : IUnknown {

		//// Properties ==================================================

		//[propput]
		//HRESULT engine([in] ISimpleTicker* );

		//// Methods =====================================================

		//HRESULT initialise();

		//HRESULT invoke([in] StrategyInvokeReasons reason);

		//[helpstring("Called after historic price data has been loaded, but before the first tick is notified")]
		//HRESULT start();

  //  };

  //  [
  //    uuid(3ea016ad-6bd8-45c5-b0fd-d32d84cb524f),
  //    version(1.0),
  //    nonextensible,
  //    helpstring("Defines the interface provided by the simplified ticker object")
  //  ]
  //  interface ISimpleTicker : IUnknown {

		//// Properties ==================================================

		//[propget]
		//HRESULT askPrice([out, retval] double*);

		//[propget]
		//HRESULT askSize([out, retval] long*);

		//[propget]
		//HRESULT bidSize([out, retval] long*);

		//[propget]
		//HRESULT bidPrice([out, retval] double*);

		//[propget]
		//HRESULT exchange([out, retval] BSTR* );

		//[propget]
		//HRESULT expiry([out, retval] BSTR* );

		//[propget]
		//HRESULT highPrice([out, retval] double*);

		//[propget]
		//HRESULT lastTradePrice([out, retval] double*);

		//[propget]
		//HRESULT lastTradeSize([out, retval] long*);

		//[propget]
		//HRESULT lowPrice([out, retval] double*);

		//[propget]
		//HRESULT name([out, retval] BSTR* );

		//[propget]
		//HRESULT openInterest([out, retval] long*);

		//[propget]
		//HRESULT prevClosePrice([out, retval] double*);

		//[propget]
		//HRESULT securityType([out, retval] SecurityTypes*);

		//[propget]
		//HRESULT sessionEndTime([out, retval] DATE*);

		//[propget]
		//HRESULT sessionStartTime([out, retval] DATE*);

		//[propget]
		//HRESULT symbol([out, retval] BSTR* );

		//[propget]
		//HRESULT tickSize([out, retval] double* );

		//[propget]
		//HRESULT tickValue([out, retval] CURRENCY* );

		//[propget]
		//HRESULT timestamp([out, retval] DATE*);

		//[propget]
		//HRESULT volume([out, retval] long*);

		//// Methods =====================================================

		//HRESULT addTimeframe(
		//	[in] long timePeriod,
		//	[in] TimePeriodUnits timePeriodUnit,
		//	[in, out] BSTR* studyID,
		//	[out,retval] IBars**);

		//HRESULT addStudy(
		//	[in] BSTR name, 
		//			[in, out] BSTR studyID,
		//			[in] BSTR underlyingStudyID,
		//			[in] BSTR inputValueName,
		//			[in, optional] IParameters* parameters, 
		//			[in, optional, defaultvalue("")] BSTR serviceProviderName,
		//			[in, optional, defaultvalue(0)] long numberOfValuesToCache,
		//	[out, retval] IStudy**);

		//HRESULT clearTimer(
		//	[in] _TimerListEntry* theTimer);

		//HRESULT setTimerInterval(
		//	[in] long expirySeconds,
		//	[out, retval] _TimerListEntry**);

		//HRESULT setTimerTime(
		//	[in] DATE expiryTime,
		//	[out, retval] _TimerListEntry**);

  //  };

  //  [
  //    uuid(3aecb53e-e202-4adb-ae54-fb0e5e4ef84c),
  //    version(1.0),
  //    nonextensible,
  //    helpstring("Specifies the interface to be implemented by Strategy Service Providers")
  //  ]
  //  interface IStrategyServiceProvider : IUnknown {

		//// Properties ==================================================

  //      [propget]
  //      HRESULT simpleStrategyNames([out, retval] SAFEARRAY(BSTR)*);

		//// Methods =====================================================

		//HRESULT createSimpleStrategy(
		//	[in] BSTR name,
		//	[out, retval] ISimpleStrategy** );

  //      HRESULT getStrategyDefaultParameters(
		//	[in] BSTR name,
		//	[out, retval] IParameters** );

  //      HRESULT setStrategyDefaultParameters(
		//	[in] BSTR name,
		//	[in] IParameters* parameters);

  //  };

    [
      uuid(b5346903-42bb-47f2-a512-e536dac2068a),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Service Providers that supply streaming market data")
    ]
    interface IStreamingDataConsumer : IUnknown {

		// Methods =====================================================

        [helpstring("Notifies an ask value")]
        HRESULT Ask(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT Bid(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT High(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT Low(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT OpenInterest(
                        [in] DATE timestamp, 
                        [in] long size);

        HRESULT PreviousClose(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT ResetMarketDepth(
                        [in] DATE timestamp,
						[in] VARIANT_BOOL marketDepthReRequested);

        HRESULT Trade(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT UpdateMktDepth(
                        [in] DATE timestamp, 
                        [in] long Position, 
                        [in] DOMOperations operation, 
                        [in] DOMSides side, 
                        [in] double price, 
                        [in] long size);

        HRESULT UpdateMktDepthL2(
                        [in] DATE timestamp, 
                        [in] long Position, 
                        [in] BSTR marketMaker, 
                        [in] DOMOperations operation, 
                        [in] DOMSides side, 
                        [in] double price, 
                        [in] long size);

        HRESULT Volume(
                        [in] DATE timestamp, 
                        [in] long size);
    };

    [
      uuid(c910cd98-f7ea-407e-9f55-e9c3f0cd846b),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Tickfile Service Readers")
    ]
    interface ITickfileInputServiceConsumer : IUnknown {

		// Methods =====================================================

		HResult NotifyEvent(
			[in] StandardSPEventCodes eventCode,
			[in] BSTR eventMessage,
			[in] long serviceProviderHandle);

		HRESULT Ready(                            
			[in] ITickfileSpecifier* tickfileSpec,
			[in] long tickfileSizeBytes);

        HRESULT TickfileReplayComplete();

        HRESULT ReplayProgress(
			[in] DATE timestamp,
			[in] long eventsPlayed,
			[in] float percentComplete);

    };

    [
      uuid(2f0370b1-3173-46ee-b087-35583acb6864),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Tickfile Writers")
    ]
    interface ITickfileOutputServiceConsumer : IUnknown {

		// Properties ==================================================

        [propput]
        HRESULT Ready([in] VARIANT_BOOL );



		// Methods =====================================================

		HResult NotifyEvent(
			[in] StandardSPEventCodes eventCode,
			[in] BSTR eventMessage,
			[in] long serviceProviderHandle);

        HRESULT OutputTickfileCreated(
                        [in] BSTR filename);

    };

    [
      uuid(0909b6e7-903f-496f-b04d-dfeb4ac4b39f),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Readers")
    ]
    interface ITickfileReader : IUnknown {

		// Properties ==================================================

        [propget]
        HRESULT Contract(
                        [out, retval] Contract** );

        [propput]
        HRESULT Contract([in] Contract* );

        [propget]
        HRESULT ContractSpecifier(
                        [out, retval] ContractSpecifier** );

        [propget]
        HRESULT FirstTickFileTime(
                        [out, retval] DATE* );

        [propget]
        HRESULT InputTickfileSpecifier(
                        [out, retval] ITickfileSpecifier** );

        [propput]
        HRESULT ReplayProgressEventFrequency(
                        [in] long );

        [propget]
        HRESULT ReplayProgressEventFrequency(
                        [out, retval] long* );

		[propget]
		HRESULT TickfileSizeBytes(
			[out,retval] long* );

	// Methods =====================================================

		HRESULT CloseInputFile();

		HRESULT FireNextTick();

        HRESULT ReplayTickfile(
                        [in] ITickfileSpecifier* tickfileSpecifier);

        HRESULT Supports(
                        [in] long capabilities, 
                        [in, optional] BSTR FormatIdentifier, 
                        [out, retval] VARIANT_BOOL* );
    };

    [
      uuid(F14743E6-6551-40B3-AFF0-82C5FC47FF0C),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Service Providers")
    ]
    interface ITickfileServiceProvider : IUnknown {

		// Properties ==================================================

        [propget]
        HRESULT SupportedFormats(
			[out, retval] SAFEARRAY(TickfileFormatSpecifier)* );

		// Methods =====================================================


        HRESULT CreateTickfileReader(
			[in] IStreamingDataConsumer* dataConsumer,
			[in] ITickfileInputServiceConsumer* serviceConsumer,
                        [in] BSTR formatIdentifier, 
			[out, retval] ITickfileReader** );

        HRESULT CreateTickfileWriter(
			[in] ITickfileOutputServiceConsumer* serviceConsumer,
                        [in, optional, defaultvalue("")] BSTR formatIdentifier, 
                        [in, optional, defaultvalue("")] BSTR location, 
                        [out, retval] ITickfileWriter** );

        HRESULT Supports(
                        [in] long capabilities, 
                        [in, optional] BSTR FormatIdentifier, 
                        [out, retval] VARIANT_BOOL* );

    };

    [
      uuid(d406d86d-78c3-4df9-ba52-429c689f822f),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Specifier objects")
    ]
    interface ITickfileSpecifier : IUnknown {

        [propput,
		 helpstring("Identifies the tickfile format")]
		HRESULT TickfileFormatID([in] BSTR) ;

        [propget,
		 helpstring("Identifies the tickfile format")]
		HRESULT TickfileFormatID([out, retval] BSTR*) ;

        [propput,
		 helpstring("For file-based tickfile formats, contains the full path and filename of the tickfile")]
		HRESULT Filename([in] BSTR) ;

        [propget,
		 helpstring("For file-based tickfile formats, contains the full path and filename of the tickfile")]
		HRESULT Filename([out, retval] BSTR*) ;

        [propput,
		 helpstring("For stream-based tickfile formats, contains the contract for the tickstream")]
        HRESULT Contract([in] Contract*) ;

        [propget,
		 helpstring("For stream-based tickfile formats, contains the contract for the tickstream")]
        HRESULT Contract([out, retval] Contract**) ;

        [propput,
		 helpstring("For stream-based tickfile formats, specifies the start date and time for the tickstream")]
        HRESULT FromDate([in] DATE) ;

        [propget,
		 helpstring("For stream-based tickfile formats, specifies the start date and time for the tickstream")]
        HRESULT FromDate([out, retval] DATE*) ;

        [propput,
		 helpstring("For stream-based tickfile formats, specifies the end date and time for the tickstream")]
        HRESULT ToDate([in] DATE) ;

        [propget,
		 helpstring("For stream-based tickfile formats, specifies the end date and time for the tickstream")]
        HRESULT ToDate([out, retval] DATE*) ;

		[propput,
		 helpstring("Indicates that the timespan is the whole of the session in which the From value falls")]
		HRESULT EntireSession([in] VARIANT_BOOL) ;

		[propget,
		 helpstring("Indicates that the timespan is the whole of the session in which the From value falls")]
		HRESULT EntireSession([out, retval] VARIANT_BOOL*) ;

    };

    [
      uuid(23156A1B-88C6-48B9-B9E3-1F4C143D8344),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Writers")
    ]
    interface ITickfileWriter : IUnknown {

		// Properties ==================================================

        [propput]
        HRESULT Contract([in] Contract* );

        [propget]
        HRESULT Contract([out, retval] Contract** );

		// Methods =====================================================

        HRESULT CloseOutputFile();

        HRESULT WriteAsk(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT WriteBid(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT WriteClose(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT WriteHigh(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT WriteLow(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT WriteMarketDepthData(
                        [in] DATE timestamp, 
                        [in] long Position, 
                        [in] BSTR marketMaker, 
                        [in] long operation, 
                        [in] long side, 
                        [in] double price, 
                        [in] long size);

        HRESULT WriteMarketDepthReset([in] DATE timestamp);

        HRESULT WriteTrade(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT WriteVolume(
                        [in] DATE timestamp, 
                        [in] long size);

        HRESULT WriteOpenInterest(
                        [in] DATE timestamp, 
                        [in] long size);

    };


};
