// typelib filename: TradeBuildSP.dll

[
  uuid(3EEF49D2-D9E3-4FFD-ABC7-B7713807A951),
  version(2.0),
  helpstring("TradeBuild Service Provider Interface Type Library")
]
library TradeBuildSP
{
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface IBarDataConsumer;
    interface IBarDataInputServiceConsumer;
    interface IBarDataOutputServiceConsumer;
    interface IBarDataReader;
    interface IBarDataServiceProvider;
    interface IBarDataWriter;
    interface ICommonServiceConsumer;
    interface ICommonServiceProvider;
    interface IContract;
    interface IContracts;
    interface IContractSpecifier;
    interface IComboLegs;
    interface IComboLeg;
    interface IContractInfoServiceProvider;
    interface IContractInfoServiceConsumer;
    interface IListener;
    interface IStreamingDataConsumer;
    interface ITickfileInputServiceConsumer;
    interface ITickfileOutputServiceConsumer;
    interface ITickfileReader;
    interface ITickfileServiceProvider;
    interface ITickfileWriter;

    // Enums *************************************************************************

    typedef [uuid(870e315f-032f-44ca-8b73-f754e09c4ba2), version(1.0)]
    enum {
        Trade = 0,
        Bid = 1,
        Ask = 2
    } BarTypes;

    typedef [uuid(892d802e-490e-401c-b12c-8a313e004ce8), version(1.0)]
    enum {
        Store = 1
    } ContractInfoServiceProviderCapabilities;

//    typedef [uuid(170DD609-38C8-49DA-9096-33BA70A4ECDB), version(1.0)]
//   enum {
//        DOMNoEvents = 0,
//        DOMRawEvents = 1,
//        DOMProcessedEvents = 2,
//        DOMBothEvents = 3
//    } DOMEvents;

    typedef [uuid(82212E6B-9D9C-4A44-ADB5-5F225CEA50B8), version(1.0)]
    enum {
        DOMInsert = 0,
        DOMUpdate = 1,
        DOMDelete = 2
    } DOMOperations;

    typedef [uuid(21DC1B1C-E06E-4741-AA29-3510A5DECF4A), version(1.0)]
    enum {
        DOMAsk = 0,
        DOMBid = 1,
        DOMLast = 2
    } DOMSides;

    typedef [uuid(e0132d3f-a956-484d-a703-062027df9f8d), version(1.0)]
    enum {
        HistDataStore = 1
    } HistoricDataServiceProviderCapabilities;

    typedef [uuid(CA5FFDA3-757C-4CB6-B86E-AD4C524E49D2), version(1.0)]
    enum {
        LegSamePos = 0,
        LegOpenPos = 1,
        LegClosePos = 2,
        LegUnknownPos = 3
    } LegOpenClose;

    typedef [uuid(756ef079-7875-4ad8-90e2-ed3f4944ee05), version(1.0)]
    enum {
    	NoValidId = -1
    } Misc;

    typedef [uuid(432653EE-39C0-4AEF-BE8E-F69213F3B41B), version(1.0)]
    enum {
        OptNone = 0,
        OptCall = 1,
        OptPut = 2
    } OptionRights;

    typedef [uuid(9f77deb1-43ef-484a-8138-f029377382bf
), version(1.0)]
    enum {
	ActionNone = 0,
	ActionBuy = 1,
	ActionSell = 2
    } OrderActions;

    typedef [uuid(0B9D5098-388C-42B8-839D-C268A42457E9), version(1.0)]
    enum {
        OrderTypeNone = 0,
        OrderTypeMarket = 1,
        OrderTypeMarketClose = 2,
        OrderTypeLimit = 3,
        OrderTypeLimitClose = 4,
        OrderTypePegMarket = 5,
        OrderTypeStop = 6,
        OrderTypeStopLimit = 7,
        OrderTypeTrail = 8,
        OrderTypeRelative = 9,
        OrderTypeVWAP = 10,
        OrderTypeMarketToLimit = 11,
        OrderTypeQuote = 12
    } OrderTypes;

    typedef [uuid(B2552E20-11F4-486E-A351-2B1212F90982), version(1.0)]
    enum {
        SecTypeStock = 1,
        SecTypeFuture = 2,
        SecTypeOption = 3,
        SecTypeFuturesOption = 4,
        SecTypeCash = 5,
        SecTypeBag = 6,
        SecTypeIndex = 7
    } SecurityTypes;

    typedef [uuid(517d2d3a-4df5-4b66-8112-8e1969f4d74e), 
	version(1.0)]
    enum {
	Tickfile = 1,
	RealtimeData = 2,
	ExchangeSimulator = 4,
	LiveOrderSubmission = 8,
	HistoricalData = 16,
	OrderPersistence = 32,
	ContractInfo = 64
    } ServiceProviderTypes;

    typedef [uuid(bb4fb494-5c9c-4ed3-8791-7b35795a77d7), 
	version(1.0)]
    enum {

	[helpstring("Tickfile is empty")]
    	TFTickfileEmpty = 2000,		

	[helpstring("Tickfile structure doesn't correspond to format id")]
    	TFTickfileInvalid = 2001,	

	[helpstring("The version of tickfile is not supported")]
    	TFTickfileVersionNotSupported = 2002,
                            		
	[helpstring("The tickfile contains invalid contract details")]
    	TFContractDetailsInvalid = 2003,	

	[helpstring("The tickfile contains no contract details")]
    	TFNoContractDetails = 2004,	

	[helpstring("The specified tickfile does not exist")]
    	TFTickfileDoesntExist = 2005,

	[helpstring("Unable to connect to the tickfile's data source")]
    	TFCantConnectDataSource = 2006,

	[helpstring("The tickfile's data source is no longer responding or sending data")]
    	TFDataSourceNotResponding = 2007,

	[helpstring("Trying again to connect to the tickfile's data source")]
    	TFRetryConnectDataSource = 2008,

	[helpstring("The contract specifier in the tickfile specifier does not refer to a valid contract")]
    	TFContractSpecifierInvalid = 2009,

	[helpstring("Unable to connect to the contract data source")]
    	CICantConnectDataSource = 2100,

	[helpstring("Trying again to connect to the contract data source")]
    	CIRetryConnectDataSource = 2101,

	[helpstring("Unable to connect to the historical data source")]
    	HDCantConnectDataSource = 2200,

	[helpstring("Trying again to connect to the historical data source")]
    	HDRetryConnectDataSource = 2201

   } StandardSPErrorCodes;

    typedef [uuid(4fa2ef4f-d6b1-4201-965c-9e0550f0960f), 
	version(1.0)]
    enum {
        Log = 1,
        Trace = 2,
	Debug = 3
    } StandardListenValueTypes;

    typedef [uuid(8139f349-68b8-4e48-bf72-2dc4cdaeb8a8), 
	version(1.0)]
    enum {
        FileBased = 1,
        StreamBased = 2
    } TickfileFormatTypes;

    typedef [uuid(810E7E7B-C092-48CB-B5B1-B48443DD8D08), version(1.0)]
    enum {
        Record = 1,
        RecordMarketDepth = 2,
        Replay = 4,
        PositionExact = 8,
        ReplayMarketDepth = 16,
	ReportReplayProgress = 32,
	SaveContractInformation = 64
    } TickfileServiceProviderCapabilities;

    typedef [uuid(0EB43BAD-8A73-4B1E-B9A3-B87E89583CC9), 
	version(1.0)]
    enum {
        TickfileNotPlaying = 0,
        TickfilePlaying = 1,
        TickfilePaused = 2
    } TickfileStateCodes;

    typedef [uuid(27E6B0E1-E7BE-4CD9-82C0-27A6BD7BA272), version(1.0)]
    enum {
        TimestampTimeOnly = 0,
        TimestampDateOnly = 1,
        TimestampDateAndTime = 2,
        TimestampCustom = 3
    } TimestampFormats;

    // Types *************************************************************************   

    typedef [uuid(ea114a07-dc5f-481b-8e39-770bab48a507), version(1.0)]
    struct tagBar {
	DATE Timestamp;
	BarTypes BarType;
	long PeriodMinutes;
	double OpenPrice;
	double HighPrice;
	double LowPrice;
	double ClosePrice;
	long Volume;
	long TickVolume;
	long OpenInterest;
    } Bar;

    typedef [uuid(8fe22277-b7a6-4cb7-acdc-cb0dcefe76ff), version(1.0)]
    struct tagBarDataSpecifier {

        [helpstring("Contains the contract specifier for the required data")]
        IContractSpecifier ContractSpecifier;

        [helpstring("Contains the period length in minutes for the required data")]
	long BarLengthMinutes;

	[helpstring("Specifies the type of bar data required")]
	BarTypes Bartype;

        [helpstring("Specifies the start date and time for the data")]
        DATE From;

        [helpstring("Specifies the end date and time for the data")]
        DATE To;

	[helpstring("Specifies the maximum number of bars to be returned")]
	long NumberOfBars;

    } BarDataSpecifier;

    typedef [uuid(eb2da908-cd7f-43a5-aa44-9e22e131ae9a), version(1.0)]
    struct tagDictionaryEntry {
        BSTR Key;
	BSTR Value;
    } DictionaryEntry;

    typedef [uuid(31907931-F3EF-4650-901D-65A71AB098BC), version(1.0)]
    struct tagGUID {
        [helpstring("data")]
        long Data[4];
    } GUID;

    typedef [uuid(c7fb9add-a3d6-48e4-b4e4-b5bf2b2168b2), version(1.0)]
    struct tagServiceProviderDetails {
        BSTR Comments;
	BSTR Vendor;
	BSTR EXEName;
	BSTR FileDescription;
	BSTR LegalCopyright;
	BSTR LegalTrademarks;
	long VersionMajor;
	long VersionMinor;
	long VersionRevision;
	long Path;
	long ProductName;
    } ServiceProviderDetails;

    typedef [uuid(1B7D8EE5-88B5-40B3-AD3C-5DF2B1B644F8), version(1.0)]
    struct tagSortEntry {
        [helpstring("Key")]
        BSTR Key;
        [helpstring("ObjectRef")]
        IDispatch* ObjectRef;
    } SortEntry;

    typedef [uuid(50e309ce-2461-45bd-b9be-8ae0312905b9), version(1.0)]
    struct tagTickfileFormatSpecifier {

        [helpstring("Indicates the type of tickfile format")]
	TickfileFormatTypes FormatType;

        [helpstring("Bitmask of TickfileServiceProviderCapabilities values indicating the capabilities supported by this tickfile format")]
	long Capabilities;

        [helpstring("The unique id identifying this tickfile format")]
        BSTR FormalID;

        [helpstring("The informal (human readable but not necessarily unique) name for this tickfile format")]
        BSTR Name;

	[helpstring("For file-based tickfile formats, this is the filename extension used to identify tickfiles in this format")]
	BSTR FileExtension;
    } TickfileFormatSpecifier;

    typedef [uuid(53fb89b4-d006-42b8-a060-44c781882dd4), version(1.0)]
    struct tagTickfileSpec {

        [helpstring("Identifies the tickfile format")]
	BSTR TickfileFormatID;

        [helpstring("For file-based tickfile formats, contains the full path and filename of the tickfile")]
	BSTR Filename;

        [helpstring("For stream-based tickfile formats, contains the contract for the tickstream")]
        IContract Contract;

        [helpstring("For stream-based tickfile formats, specifies the start date and time for the tickstream")]
        DATE From;

        [helpstring("For stream-based tickfile formats, specifies the end date and time for the tickstream")]
        DATE To;

	[helpstring("Indicates that the timespan is the whole of the session in which the From value falls")]
	VARIANT_BOOL EntireSession;

    } TickfileSpec;

    // Interfaces *************************************************************************

    [
      uuid(88de545b-c57b-434c-a946-8bd0588c3f86),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Service Providers that supply market data consolidated into bars")
    ]
    interface IBarDataConsumer : IUnknown {

	// Methods =====================================================

        HRESULT Bar(
                        [in] Bar* data);

    };

    [
      uuid(db7cd890-70fa-44ae-a0a0-64ca47fa8328),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Bar Data Readers")
    ]
    interface IBarDataInputServiceConsumer : IUnknown {

	// Methods =====================================================

	HRESULT Error(
			[in] StandardSPErrorCodes errorCode,
			[in] BSTR errorMessage,
			[in, optional, defaultvalue(NoValidId)] long id);

	HRESULT Ready();

        HRESULT BarDataComplete();

        HRESULT Progress(
			[in] DATE timestamp,
			[in] long eventsPlayed,
			[in] float percentComplete);

    };

    [
      uuid(8d0c2c5d-506e-438b-a530-6681388be839),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Bar Data Writers")
    ]
    interface IBarDataOutputServiceConsumer : IUnknown {

	// Properties ==================================================

        [propput]
        HRESULT Ready([in] VARIANT_BOOL );


	// Methods =====================================================

	HRESULT Error(
			[in] StandardSPErrorCodes errorCode,
			[in] BSTR errorMessage,
			[in, optional, defaultvalue(NoValidId)] long id);

        HRESULT OutputBarfileCreated(
                        [in] BSTR filename);

    };

    [
      uuid(43e4982a-b79c-4b64-a3ce-3d241fcb944a),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Bar Data Readers")
    ]
    interface IBarDataReader : IUnknown {

	// Properties ==================================================

        [propget]
        HRESULT BarDataSpecifier(
                        [out, retval] BarDataSpecifier* );

	[propget]
	HRESULT NumberOfBars(
			[out,retval] long* );

	// Methods =====================================================

	HRESULT FetchBars(
			[in] BarDataSpecifier* barSpecifier);

	HRESULT ReleaseDataStore();

	HRESULT FireNextBar();

        HRESULT Supports(
                        [in] long capabilities, 
                        [out, retval] VARIANT_BOOL* );
    };

    [
      uuid(ddf45e18-4c17-4949-808d-06b0fe72a936),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Bar Data Service Providers")
    ]
    interface IBarDataServiceProvider : IUnknown {

	// Properties ==================================================

	// Methods =====================================================


        HRESULT CreateBarDataReader(
			[in] IBarDataConsumer* dataConsumer,
			[in] IBarDataInputServiceConsumer* serviceConsumer,
			[out, retval] IBarDataReader** );

        HRESULT CreateBarDataWriter(
			[in] IBarDataOutputServiceConsumer* serviceConsumer,
			[in] IContractSpecifier* contractSpec,
                        [in, optional, defaultvalue("")] BSTR location, 
                        [out, retval] IBarDataWriter** );

        HRESULT StopAll();

        HRESULT Supports(
                        [in] long capabilities, 
                        [out, retval] VARIANT_BOOL* );

    };

    [
      uuid(a5b07332-71e6-424f-a442-52c48decc02c),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Writers")
    ]
    interface IBarDataWriter : IUnknown {

	// Properties ==================================================

        [propget]
        HRESULT ContractSpecifier([out, retval] IContractSpecifier** );

	// Methods =====================================================

	HRESULT ReleaseDataStore();


        HRESULT WriteBar([in] Bar* data);

    };

    [
      uuid(FCD8A452-31DD-4131-9E2B-1807F9522921),
      version(1.0),
      nonextensible,
      helpstring("An object that holds specification information relating to a compound contract")
    ]
    interface IComboLeg : IUnknown {

	// Properties ==================================================

        [propget]
        HRESULT Action([out, retval] OrderActions* );

        [propput]
        HRESULT Action([in] OrderActions );

        [propget]
        HRESULT ContractID([out, retval] long* );

        [propput]
        HRESULT ContractID([in] long );

        [propget]
        HRESULT Exchange([out, retval] BSTR* );

        [propput]
        HRESULT Exchange([in] BSTR );

        [propput]
        HRESULT OpenClose([in] LegOpenClose );

        [propget]
        HRESULT OpenClose([out, retval] LegOpenClose* );

        [propget]
        HRESULT Ratio([out, retval] long* );

        [propput]
        HRESULT Ratio([in] long );

	// Methods =====================================================

        HRESULT Clone([out, retval] IComboLeg** );

        HRESULT ToString([out, retval] BSTR* );
    };

    [
      uuid(C157B09E-693D-415E-9818-641AB96F919F),
      version(1.0),
      nonextensible,
      helpstring("Defines a collection of IComboLeg objects")
    ]
    interface IComboLegs : IUnknown {

	// Properties ==================================================

        [propget]
        HRESULT Count([out, retval] long* );

	// Methods =====================================================

	HRESULT Add([in] IComboLeg* comboLeg,
			[in, optional, defaultvalue("")] BSTR key); 

        HRESULT Clone([out, retval] IComboLegs** );

        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] IComboLeg** );

        HRESULT NewComboLeg([out, retval] IcomboLeg**);

//        [id(DISPID_NEWENUM), hidden]
 //       HRESULT NewEnum([out, retval] IUnknown** );

        HRESULT Remove([in] VARIANT index);
    };

    [
      uuid(188dc2d1-ac64-4717-8c4f-8a1fbcdf8ae8),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild for common functions to be called by any Service Provider")
    ]
    interface ICommonServiceConsumer : IUnknown {

	// Methods =====================================================

//	HRESULT Error(
//			[in] StandardSPErrorCodes errorCode,
//			[in] BSTR errorMessage,
//			[in, optional, defaultvalue(NoValidId)] long id);

        HRESULT FormatTimestamp(
                        [in] DATE timestamp, 
                        [in, optional, defaultvalue(TimestampDateAndTime)] TimestampFormats formatOption, 
                        [in, optional, defaultvalue("yyyymmddhhnnss")] BSTR formatString, 
                        [out, retval] BSTR* );

        HRESULT GenerateGUID([out, retval] GUID* );

        HRESULT GenerateGUIDString([out, retval] BSTR* );

        HRESULT GenerateId([out, retval] long* );

        HRESULT GenerateIdString([out, retval] BSTR* );

        HRESULT GetTimestamp([out, retval] DATE* );

        HRESULT GUIDToString(
                        [in, out] GUID* pGUID, 
                        [out, retval] BSTR* );

	HRESULT NewContract(
			[out, retval] IContract**);

	HRESULT NewContractSpecifier(
			[out, retval] IContractSpecifier**);

	HRESULT NotifyListeners(
			[in] VARIANT value,
			[in] long valueType,
			[in] DATE timestamp);

	HRESULT RegisterServiceProvider(
			[in] long handle,
			[in] ServiceProviderTypes spType);

	HRESULT ServiceProviderError(
			[in] long errorCode,
			[in] BSTR errorMessage,
			[in] BSTR serviceProviderName);

        HRESULT SortObjects(
                        [in, out] SAFEARRAY(SortEntry)* data);

        HRESULT ToBytes(
                        [in, out] BSTR* inString, 
                        [out, retval] SAFEARRAY(unsigned char)* );

        HRESULT ToHex(
                        [in, out] SAFEARRAY(unsigned char)* inAr, 
                        [out, retval] BSTR* );
    };

    [
      uuid(e73f0227-2461-46cc-9156-1d928cb72e6d),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by all Service Providers")
    ]
    interface ICommonServiceProvider : IUnknown {

	// Properties ==================================================

	[propget]
	HRESULT Name([out, retval] BSTR* );

	[propget]
	HRESULT Details([out, retval] ServiceProviderDetails* );

	// Methods =====================================================

        HRESULT Link(
			[in] ICommonServiceConsumer* commonServiceConsumer,
			[in] long handle);

	HRESULT Terminate();

    };

    [
      uuid(09A34E42-D99F-42E5-85FE-5A12CBE648F4),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface for passing contract details")
    ]
    interface IContract : IUnknown {

	// Properties ==================================================

        [propget]
        HRESULT ContractID([out, retval] long* );

        [propput]
        HRESULT ContractID([in] long );

        [propget]
        HRESULT CurrentSessionEndTime([out, retval] DATE* );

        [propget]
        HRESULT CurrentSessionStartTime([out, retval] DATE* );

        [propget]
        HRESULT DaysBeforeExpiryToSwitch([out, retval] long* );

        [propput]
        HRESULT DaysBeforeExpiryToSwitch([in] long );

        [propget]
        HRESULT Description([out, retval] BSTR* );

        [propput]
        HRESULT Description([in] BSTR );

        [propget]
        HRESULT ExpiryDate([out, retval] DATE* );

        [propput]
        HRESULT ExpiryDate([in] DATE );

        [propget]
        HRESULT Key([out, retval] BSTR* );

        [propget]
        HRESULT MarketName([out, retval] BSTR* );

        [propput]
        HRESULT MarketName([in] BSTR );

        [propget]
        HRESULT MinimumTick([out, retval] double* );

        [propput]
        HRESULT MinimumTick([in] double );

        [propget]
        HRESULT Multiplier([out, retval] long* );

        [propput]
        HRESULT Multiplier([in] long );

        [propget]
        HRESULT NumberOfDecimals([out, retval] long* );

        [propget]
        HRESULT OrderTypes([out, retval] SAFEARRAY(OrderTypes)* );

        [propput]
        HRESULT OrderTypes([in, out] SAFEARRAY(OrderTypes)* );

        [propget]
        HRESULT ProviderID(
			[in] BSTR providerKey,
			[out, retval] BSTR* );

        [propput]
        HRESULT ProviderIDs([in] SAFEARRAY(DictionaryEntry)* );

        [propget]
        HRESULT SessionEndTime([out, retval] DATE* );

        [propput]
        HRESULT SessionEndTime([in] DATE );

        [propget]
        HRESULT SessionStartTime([out, retval] DATE* );

        [propput]
        HRESULT SessionStartTime([in] DATE );

        [propget]
        HRESULT Specifier([out, retval] IContractSpecifier** );

        [propput]
        HRESULT Specifier([in] IContractSpecifier* );

        [propget]
        HRESULT TradingClass([out, retval] BSTR* );

        [propput]
        HRESULT TradingClass([in] BSTR );

        [propget]
        HRESULT ValidExchanges([out, retval] SAFEARRAY(BSTR)* );

        [propput]
        HRESULT ValidExchanges([in, out] SAFEARRAY(BSTR)* );

	// Methods =====================================================

	HRESULT BarStartTime(
			[in] DATE Timestamp, 
			[in] long BarLength,
			[out,retval] Date*);

        HRESULT Clone([out, retval] IContract** );

        HRESULT FromXML([in] BSTR contractXML);

	HRESULT GetSessionTimes( 	
			[in] DATE Timestamp, 
			[in, out] DATE* sessionStartTime,
			[in, out] DATE* sessionEndTime);

	HRESULT IsTimeInSession(
			[in] DATE Timestamp, 
			[out,retval] VARIANT_BOOL*);

	HRESULT SetSession(
			[in] DATE Timestamp);

        HRESULT ToString([out, retval] BSTR* );

        HRESULT ToXML([out, retval] BSTR* );
    };

    [
      uuid(fcefe4ef-6537-402d-a7ef-73b2e4182855),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be provided by TradeBuild to Contract Info Service Providers")
    ]
    interface IContractInfoServiceConsumer : IUnknown {

	// Properties ==================================================


	// Methods =====================================================

	HRESULT Error(
			[in] StandardSPErrorCodes errorCode,
			[in] BSTR errorMessage,
			[in, optional, defaultvalue(NoValidId)] long id);

	HRESULT LoadComplete(
			[in] long handle,
                        [in] IContracts* pContracts);

//        HRESULT ServiceProviderError(
//                      [in] long errorCode, 
//                      [in] BSTR errorMessage, 
//                      [in] BSTR ServiceProviderName);
    };

    [
      uuid(657ab51f-eec5-42b4-b71b-7001ecae3d24),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Contract Info Service Providers")
    ]
    interface IContractInfoServiceProvider : IUnknown {

	// Properties ==================================================

        [propput]
        HRESULT ContractInfoServiceConsumer([in] IContractInfoServiceConsumer* rhs);

	// Methods =====================================================

        HRESULT RequestContractDetails(
                        [in] IContracts* pContracts);

        HRESULT Supports(
                        [in] long capabilities, 
                        [out, retval] VARIANT_BOOL* );

    };

    [
      uuid(097ab811-caf4-4b83-a7d5-20d5d177bee7),
      version(1.0),
      nonextensible,
      helpstring("A collection of IContract objects")
    ]
    interface IContracts : IUnknown {

	// Properties ==================================================


	[propput]
	HRESULT ContractSpecifier([in] IContractSpecifier*);

	[propget]
	HResult ContractSpecifier([out, retval] IContractSpecifier**);

	[propget]
	HRESULT Count([out, retval] long*);

	// Methods =====================================================

	HRESULT AddContract(
			[in] IContract* pContract );
	
	HRESULT ContractSpecifierInvalid();

	HRESULT Item(
			[in] VARIANT index,
			[out, retval] IContract**);

	HRESULT Remove([in] VARIANT index);

	HRESULT ServiceProviderCantHandle(
			[in] BSTR reason,
			[in] BSTR serviceProviderName);

    };

    [
      uuid(D09D30E9-D3EF-4790-AE0D-EEA07BD8645D),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface for passing contract specifications")
    ]
    interface IContractSpecifier : IUnknown {

	// Properties ==================================================

        [propput]
        HRESULT ComboLegs([in] IComboLegs* );

        [propget]
        HRESULT ComboLegs([out, retval] IComboLegs** );

        [propput]
        HRESULT CurrencyCode([in] BSTR );

        [propget]
        HRESULT CurrencyCode([out, retval] BSTR* );

        [propput]
        HRESULT Exchange([in] BSTR );

        [propget]
        HRESULT Exchange([out, retval] BSTR* );

        [propput]
        HRESULT Expiry([in] BSTR );

        [propget]
        HRESULT Expiry([out, retval] BSTR* );

        [propget]
        HRESULT Key([out, retval] BSTR* );

        [propput]
        HRESULT LocalSymbol([in] BSTR );

        [propget]
        HRESULT LocalSymbol([out, retval] BSTR* );

        [propput]
        HRESULT Right([in] OptionRights );

        [propget]
        HRESULT Right([out, retval] OptionRights* );

        [propput]
        HRESULT SecType([in] SecurityTypes );

        [propget]
        HRESULT SecType([out, retval] SecurityTypes* );

        [propput]
        HRESULT Strike([in] double );

        [propget]
        HRESULT Strike([out, retval] double* );

        [propput]
        HRESULT Symbol([in] BSTR );

        [propget]
        HRESULT Symbol([out, retval] BSTR* );

	// Methods =====================================================

        HRESULT Clone([out, retval] IContractSpecifier** );

        HRESULT Equals(
                        [in] IContractSpecifier* pContractSpecifier, 
                        [out, retval] VARIANT_BOOL* );

        HRESULT FuzzyEquals(
                        [in] IContractSpecifier* pContractSpecifier, 
                        [out, retval] VARIANT_BOOL* );

        HRESULT ToString([out, retval] BSTR* );
    };

    [
      uuid(1F93AA6B-D8B2-41F7-AB87-DD303715B583),
      version(1.0),
      nonextensible,
      helpstring("Defines the interface to be implemented by listener classes")
    ]
    interface IListener : IUnknown {

	// Methods =====================================================

        HRESULT Notify(
                        [in] long valueType, 
                        [in] VARIANT data, 
                        [in] DATE Timestamp);
    };

    [
      uuid(b5346903-42bb-47f2-a512-e536dac2068a),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Service Providers that supply streaming market data")
    ]
    interface IStreamingDataConsumer : IUnknown {

	// Methods =====================================================

        [helpstring("Notifies an ask value")]
        HRESULT Ask(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT Bid(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT High(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT Low(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT OpenInterest(
                        [in] DATE timestamp, 
                        [in] long size);

        HRESULT PreviousClose(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT ResetMarketDepth(
                        [in] DATE timestamp,
			[in] VARIANT_BOOL marketDepthReRequested);

        HRESULT Trade(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT UpdateMktDepth(
                        [in] DATE timestamp, 
                        [in] long Position, 
                        [in] DOMOperations operation, 
                        [in] DOMSides side, 
                        [in] double price, 
                        [in] long size);

        HRESULT UpdateMktDepthL2(
                        [in] DATE timestamp, 
                        [in] long Position, 
                        [in] BSTR marketMaker, 
                        [in] DOMOperations operation, 
                        [in] DOMSides side, 
                        [in] double price, 
                        [in] long size);

        HRESULT Volume(
                        [in] DATE timestamp, 
                        [in] long size);
    };

    [
      uuid(2B4451D8-74F8-4E90-98A7-CC219C8D44A1),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Tickfile Service Readers")
    ]
    interface ITickfileInputServiceConsumer : IUnknown {

	// Methods =====================================================

	HRESULT Error(
			[in] StandardSPErrorCodes errorCode,
			[in] BSTR errorMessage,
			[in, optional, defaultvalue(NoValidId)] long id);

	HRESULT Ready(                            
			[in] TickfileSpec* tickfileSpec,
			[in] long tickfileSizeBytes);

        HRESULT TickfileReplayComplete();

        HRESULT ReplayProgress(
			[in] DATE timestamp,
			[in] long eventsPlayed,
			[in] float percentComplete);

    };

    [
      uuid(68d3f13a-3f39-48cf-af0d-715fd99a4045),
      version(1.0),
      nonextensible,
      helpstring("Provides the interface into TradeBuild to be called by Tickfile Writers")
    ]
    interface ITickfileOutputServiceConsumer : IUnknown {

	// Properties ==================================================

        [propput]
        HRESULT Ready([in] VARIANT_BOOL );



	// Methods =====================================================

	HRESULT Error(
			[in] StandardSPErrorCodes errorCode,
			[in] BSTR errorMessage,
			[in, optional, defaultvalue(NoValidId)] long id);

        HRESULT OutputTickfileCreated(
                        [in] BSTR filename);

    };

    [
      uuid(0909b6e7-903f-496f-b04d-dfeb4ac4b39f),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Readers")
    ]
    interface ITickfileReader : IUnknown {

	// Properties ==================================================

        [propget]
        HRESULT Contract(
                        [out, retval] IContract** );

        [propput]
        HRESULT Contract([in] IContract* );

        [propget]
        HRESULT ContractSpecifier(
                        [out, retval] IContractSpecifier** );

        [propget]
        HRESULT FirstTickFileTime(
                        [out, retval] DATE* );

        [propput]
        HRESULT InputTickfileSpecifier(
                        [in] TickfileSpec* );

        [propget]
        HRESULT InputTickfileSpecifier(
                        [out, retval] TickfileSpec* );

        [propput]
        HRESULT ReplayProgressEventFrequency(
                        [in] long );

        [propget]
        HRESULT ReplayProgressEventFrequency(
                        [out, retval] long* );

	[propget]
	HRESULT TickfileSizeBytes(
			[out,retval] long* );

	// Methods =====================================================

	HRESULT CloseInputFile();

	HRESULT FireNextTick();

        HRESULT Supports(
                        [in] long capabilities, 
                        [in, optional] BSTR FormatIdentifier, 
                        [out, retval] VARIANT_BOOL* );
    };

    [
      uuid(F14743E6-6551-40B3-AFF0-82C5FC47FF0C),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Service Providers")
    ]
    interface ITickfileServiceProvider : IUnknown {

	// Properties ==================================================

        [propget]
        HRESULT SupportedFormats(
			[out, retval] SAFEARRAY(TickfileFormatSpecifier)* );

	// Methods =====================================================


        HRESULT CreateTickfileReader(
			[in] IStreamingDataConsumer* dataConsumer,
			[in] ITickfileInputServiceConsumer* serviceConsumer,
                        [in] BSTR formatIdentifier, 
			[out, retval] ITickfileReader** );

        HRESULT CreateTickfileWriter(
			[in] ITickfileOutputServiceConsumer* serviceConsumer,
                        [in, optional, defaultvalue("")] BSTR formatIdentifier, 
                        [in, optional, defaultvalue("")] BSTR location, 
                        [out, retval] ITickfileWriter** );

        HRESULT StopAll();

        HRESULT Supports(
                        [in] long capabilities, 
                        [in, optional] BSTR FormatIdentifier, 
                        [out, retval] VARIANT_BOOL* );

    };

    [
      uuid(23156A1B-88C6-48B9-B9E3-1F4C143D8344),
      version(1.0),
      nonextensible,
      helpstring("Specifies the interface to be implemented by Tickfile Writers")
    ]
    interface ITickfileWriter : IUnknown {

	// Properties ==================================================

        [propput]
        HRESULT Contract([in] IContract* );

        [propget]
        HRESULT Contract([out, retval] IContract** );

//        [propget]
//	HRESULT FormatIdentifier([out, retval] BSTR* );

//        [propget]
//        HRESULT FormatName([out, retval] BSTR* );

//        [propget]
//        HRESULT FormatVersion([out, retval] long* );

	// Methods =====================================================

        HRESULT CloseOutputFile();

        HRESULT WriteAsk(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT WriteBid(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT WriteClose(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT WriteHigh(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT WriteLow(
                        [in] DATE timestamp, 
                        [in] double price);

        HRESULT WriteMarketDepthData(
                        [in] DATE timestamp, 
                        [in] long Position, 
                        [in] BSTR marketMaker, 
                        [in] long operation, 
                        [in] long side, 
                        [in] CURRENCY price, 
                        [in] long size);

        HRESULT WriteMarketDepthReset([in] DATE timestamp);

        HRESULT WriteTrade(
                        [in] DATE timestamp, 
                        [in] double price, 
                        [in] long size);

        HRESULT WriteVolume(
                        [in] DATE timestamp, 
                        [in] long size);

        HRESULT WriteOpenInterest(
                        [in] DATE timestamp, 
                        [in] long size);

    };

};
